{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n        healthcare: {\n          prescription: \"hsl(260 60% 55%)\",\n          diagnostics: \"hsl(190 70% 50%)\",\n          consult: \"hsl(25 90% 55%)\",\n          completed: \"hsl(210 10% 60%)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4249},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/pages/patient/ConsultWaiting.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Clock, CheckCircle2, ArrowLeft } from \"lucide-react\";\n\nexport default function ConsultWaiting() {\n  const [, setLocation] = useLocation();\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <header className=\"border-b border-border bg-card\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setLocation(\"/patient/home\")}\n            data-testid=\"button-back-home\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Home\n          </Button>\n        </div>\n      </header>\n\n      <main className=\"container mx-auto px-4 py-16 max-w-2xl\">\n        <Card className=\"p-8 md:p-12 text-center space-y-8\">\n          <div className=\"flex justify-center\">\n            <div className=\"relative\">\n              <div className=\"h-24 w-24 rounded-full bg-primary/10 flex items-center justify-center\">\n                <Clock className=\"h-12 w-12 text-primary animate-pulse\" />\n              </div>\n              <div className=\"absolute -bottom-1 -right-1 h-8 w-8 rounded-full bg-accent flex items-center justify-center border-4 border-background\">\n                <CheckCircle2 className=\"h-4 w-4 text-accent-foreground\" />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"space-y-3\">\n            <h1 className=\"text-3xl font-bold text-foreground\">\n              Your Request is Queued\n            </h1>\n            <p className=\"text-lg text-muted-foreground\">\n              A GP will review your symptoms and connect with you shortly\n            </p>\n          </div>\n\n          <div className=\"bg-muted/50 rounded-lg p-6 space-y-3 text-left\">\n            <h3 className=\"font-semibold text-foreground\">What happens next?</h3>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li className=\"flex items-start gap-2\">\n                <div className=\"h-5 w-5 rounded-full bg-primary/20 flex items-center justify-center mt-0.5 flex-shrink-0\">\n                  <span className=\"text-xs font-medium text-primary\">1</span>\n                </div>\n                <span>A GP will review your intake within 15-30 minutes</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <div className=\"h-5 w-5 rounded-full bg-primary/20 flex items-center justify-center mt-0.5 flex-shrink-0\">\n                  <span className=\"text-xs font-medium text-primary\">2</span>\n                </div>\n                <span>You'll receive a WhatsApp notification when they're ready</span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <div className=\"h-5 w-5 rounded-full bg-primary/20 flex items-center justify-center mt-0.5 flex-shrink-0\">\n                  <span className=\"text-xs font-medium text-primary\">3</span>\n                </div>\n                <span>Consultation will happen via WhatsApp video or chat</span>\n              </li>\n            </ul>\n          </div>\n\n          <div className=\"pt-4\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setLocation(\"/patient/home\")}\n              data-testid=\"button-return-home\"\n            >\n              Return to Home\n            </Button>\n          </div>\n        </Card>\n      </main>\n    </div>\n  );\n}\n","size_bytes":3504},"client/src/pages/diagnostics/Login.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { RoleLogin } from \"@/components/RoleLogin\";\nimport { api } from \"@/lib/api\";\n\nexport default function DiagnosticsLogin() {\n  const [, setLocation] = useLocation();\n\n  const handleLogin = async (email: string, phone: string) => {\n    const { user } = await api.auth.mockLogin(email, phone, \"diagnostics\");\n    localStorage.setItem(\"mediconnect_user\", JSON.stringify(user));\n    setLocation(\"/diagnostics/orders\");\n  };\n\n  return <RoleLogin role=\"diagnostics\" onLogin={handleLogin} />;\n}\n","size_bytes":532},"server/storage.ts":{"content":"import type {\n  User, InsertUser,\n  Consult, InsertConsult,\n  Message, InsertMessage,\n  Prescription, InsertPrescription,\n  Referral, InsertReferral,\n  DiagnosticsOrder, InsertDiagnosticsOrder,\n  UserRole\n} from \"@shared/schema\";\nimport { users, consults, messages, prescriptions, referrals, diagnosticsOrders } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, or, isNull } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByPhone(phone: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User>;\n  \n  // Consults\n  getConsult(id: string): Promise<Consult | undefined>;\n  listConsults(role: UserRole, userId: string): Promise<Consult[]>;\n  createConsult(consult: InsertConsult): Promise<Consult>;\n  updateConsult(id: string, updates: Partial<Consult>): Promise<Consult>;\n  \n  // Messages\n  listMessages(consultId: string): Promise<Message[]>;\n  createMessage(message: InsertMessage): Promise<Message>;\n  \n  // Prescriptions\n  getPrescription(id: string): Promise<Prescription | undefined>;\n  listPrescriptions(patientId: string): Promise<Prescription[]>;\n  createPrescription(prescription: InsertPrescription): Promise<Prescription>;\n  updatePrescription(id: string, updates: Partial<Prescription>): Promise<Prescription>;\n  getPrescriptionByQrToken(token: string): Promise<Prescription | undefined>;\n  \n  // Referrals\n  getReferral(id: string): Promise<Referral | undefined>;\n  listReferrals(userId: string, role: UserRole): Promise<Referral[]>;\n  createReferral(referral: InsertReferral): Promise<Referral>;\n  \n  // Diagnostics\n  getDiagnosticsOrder(id: string): Promise<DiagnosticsOrder | undefined>;\n  listDiagnosticsOrders(userId: string, role: UserRole): Promise<DiagnosticsOrder[]>;\n  createDiagnosticsOrder(order: InsertDiagnosticsOrder): Promise<DiagnosticsOrder>;\n  updateDiagnosticsOrder(id: string, updates: Partial<DiagnosticsOrder>): Promise<DiagnosticsOrder>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByPhone(phone: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.phone, phone));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values([insertUser]).returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    const [updated] = await db.update(users)\n      .set(updates)\n      .where(eq(users.id, id))\n      .returning();\n    \n    if (!updated) throw new Error(\"User not found\");\n    return updated;\n  }\n\n  // Consults\n  async getConsult(id: string): Promise<Consult | undefined> {\n    const [consult] = await db.select().from(consults).where(eq(consults.id, id));\n    return consult;\n  }\n\n  async listConsults(role: UserRole, userId: string): Promise<Consult[]> {\n    if (role === \"patient\") {\n      return db.select().from(consults).where(eq(consults.patientId, userId));\n    } else if (role === \"gp\") {\n      return db.select().from(consults).where(\n        or(eq(consults.gpId, userId), isNull(consults.gpId))\n      );\n    } else if (role === \"specialist\" || role === \"pharmacy\" || role === \"diagnostics\") {\n      return [];\n    }\n    return db.select().from(consults);\n  }\n\n  async createConsult(insertConsult: InsertConsult): Promise<Consult> {\n    const [consult] = await db.insert(consults).values([insertConsult]).returning();\n    return consult;\n  }\n\n  async updateConsult(id: string, updates: Partial<Consult>): Promise<Consult> {\n    const [updated] = await db.update(consults)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(consults.id, id))\n      .returning();\n    \n    if (!updated) throw new Error(\"Consult not found\");\n    return updated;\n  }\n\n  // Messages\n  async listMessages(consultId: string): Promise<Message[]> {\n    return db.select().from(messages)\n      .where(eq(messages.consultId, consultId))\n      .orderBy(messages.createdAt);\n  }\n\n  async createMessage(insertMessage: InsertMessage): Promise<Message> {\n    const [message] = await db.insert(messages).values(insertMessage).returning();\n    return message;\n  }\n\n  // Prescriptions\n  async getPrescription(id: string): Promise<Prescription | undefined> {\n    const [prescription] = await db.select().from(prescriptions).where(eq(prescriptions.id, id));\n    return prescription;\n  }\n\n  async listPrescriptions(patientId: string): Promise<Prescription[]> {\n    return db.select().from(prescriptions).where(eq(prescriptions.patientId, patientId));\n  }\n\n  async createPrescription(insertPrescription: InsertPrescription): Promise<Prescription> {\n    const [prescription] = await db.insert(prescriptions).values([insertPrescription]).returning();\n    return prescription;\n  }\n\n  async updatePrescription(id: string, updates: Partial<Prescription>): Promise<Prescription> {\n    const [updated] = await db.update(prescriptions)\n      .set(updates)\n      .where(eq(prescriptions.id, id))\n      .returning();\n    \n    if (!updated) throw new Error(\"Prescription not found\");\n    return updated;\n  }\n\n  async getPrescriptionByQrToken(token: string): Promise<Prescription | undefined> {\n    const [prescription] = await db.select().from(prescriptions).where(eq(prescriptions.qrToken, token));\n    return prescription;\n  }\n\n  // Referrals\n  async getReferral(id: string): Promise<Referral | undefined> {\n    const [referral] = await db.select().from(referrals).where(eq(referrals.id, id));\n    return referral;\n  }\n\n  async listReferrals(userId: string, role: UserRole): Promise<Referral[]> {\n    if (role === \"patient\") {\n      return db.select().from(referrals).where(eq(referrals.patientId, userId));\n    } else if (role === \"gp\") {\n      return db.select().from(referrals).where(eq(referrals.gpId, userId));\n    } else if (role === \"specialist\") {\n      return db.select().from(referrals).where(eq(referrals.specialistId, userId));\n    }\n    return db.select().from(referrals);\n  }\n\n  async createReferral(insertReferral: InsertReferral): Promise<Referral> {\n    const [referral] = await db.insert(referrals).values([insertReferral]).returning();\n    return referral;\n  }\n\n  // Diagnostics\n  async getDiagnosticsOrder(id: string): Promise<DiagnosticsOrder | undefined> {\n    const [order] = await db.select().from(diagnosticsOrders).where(eq(diagnosticsOrders.id, id));\n    return order;\n  }\n\n  async listDiagnosticsOrders(userId: string, role: UserRole): Promise<DiagnosticsOrder[]> {\n    if (role === \"patient\") {\n      return db.select().from(diagnosticsOrders).where(eq(diagnosticsOrders.patientId, userId));\n    } else if (role === \"specialist\") {\n      return db.select().from(diagnosticsOrders).where(eq(diagnosticsOrders.specialistId, userId));\n    } else if (role === \"diagnostics\") {\n      return db.select().from(diagnosticsOrders).where(eq(diagnosticsOrders.labId, userId));\n    }\n    return db.select().from(diagnosticsOrders);\n  }\n\n  async createDiagnosticsOrder(insertOrder: InsertDiagnosticsOrder): Promise<DiagnosticsOrder> {\n    const [order] = await db.insert(diagnosticsOrders).values([insertOrder]).returning();\n    return order;\n  }\n\n  async updateDiagnosticsOrder(id: string, updates: Partial<DiagnosticsOrder>): Promise<DiagnosticsOrder> {\n    const [updated] = await db.update(diagnosticsOrders)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(diagnosticsOrders.id, id))\n      .returning();\n    \n    if (!updated) throw new Error(\"Diagnostics order not found\");\n    return updated;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":8063},"client/src/hooks/use-flags.ts":{"content":"import { FLAGS, type FlagKey } from \"@shared/config\";\n\nexport function useFlag(flag: FlagKey): boolean {\n  return FLAGS[flag];\n}\n\nexport function useFlags() {\n  return FLAGS;\n}\n","size_bytes":177},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/pages/specialist/SpecialistPortal.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { TabNav, type Tab } from \"@/components/TabNav\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { StatusChip } from \"@/components/StatusChip\";\nimport { \n  Inbox, \n  Activity, \n  History, \n  User,\n  LogOut,\n  MessageSquare,\n  AlertCircle,\n  Loader2\n} from \"lucide-react\";\nimport { Tooltip, TooltipContent, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { api } from \"@/lib/api\";\nimport { getUserFromStorage } from \"@/lib/storage\";\n\nconst tabs: Tab[] = [\n  { id: \"requested\", label: \"Requested\", href: \"/specialist\", icon: <Inbox className=\"h-5 w-5\" /> },\n  { id: \"current\", label: \"Current\", href: \"/specialist\", icon: <Activity className=\"h-5 w-5\" /> },\n  { id: \"history\", label: \"History\", href: \"/specialist\", icon: <History className=\"h-5 w-5\" /> },\n  { id: \"profile\", label: \"Profile\", href: \"/specialist\", icon: <User className=\"h-5 w-5\" /> },\n];\n\nexport default function SpecialistPortal() {\n  const [, setLocation] = useLocation();\n\n  const userData = getUserFromStorage() || {};\n  const userId = userData.id;\n  const role = userData.role;\n\n  const { data: referrals = [], isLoading, error } = useQuery({\n    queryKey: [\"/api/referrals\", userId, role],\n    queryFn: () => api.referrals.list(userId, role),\n    enabled: !!userId && !!role\n  });\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"mediconnect_user\");\n    setLocation(\"/\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <header className=\"border-b border-border bg-card\">\n        <div className=\"container mx-auto px-4 py-4 flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-foreground\">Specialist Portal</h1>\n            <p className=\"text-sm text-muted-foreground\">Dr. David Williams - Cardiology</p>\n          </div>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\"\n            onClick={handleLogout}\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"h-4 w-4 mr-2\" />\n            Logout\n          </Button>\n        </div>\n      </header>\n\n      <TabNav tabs={tabs} />\n\n      <main className=\"container mx-auto px-4 py-8 max-w-6xl\">\n        {isLoading ? (\n          <div className=\"flex items-center justify-center py-12\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n          </div>\n        ) : error ? (\n          <Card className=\"p-12 text-center\">\n            <p className=\"text-destructive\">Error loading referrals: {error.message}</p>\n          </Card>\n        ) : (\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-xl font-semibold text-foreground\">Referral Requests</h2>\n              <span className=\"text-sm text-muted-foreground\">{referrals.length} pending</span>\n            </div>\n\n            {referrals.map((referral) => (\n            <Card key={referral.id} className=\"p-6 hover-elevate\" data-testid={`referral-${referral.id}`}>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start justify-between gap-4\">\n                  <div className=\"flex-1 space-y-2\">\n                    <div className=\"flex items-center gap-3\">\n                      <h3 className=\"font-semibold text-foreground\">Referral {referral.id}</h3>\n                      <StatusChip status={referral.status} />\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Referred: {new Date(referral.createdAt).toLocaleString()}\n                    </p>\n                    <p className=\"text-sm text-foreground\">{referral.reason}</p>\n                    {referral.notes && (\n                      <p className=\"text-sm text-muted-foreground italic\">{referral.notes}</p>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"flex gap-2 flex-wrap\">\n                  <Button size=\"sm\" data-testid={`button-accept-${referral.id}`}>\n                    Accept Referral\n                  </Button>\n                  <Button size=\"sm\" variant=\"outline\" data-testid={`button-view-${referral.id}`}>\n                    View Details\n                  </Button>\n                  <Tooltip>\n                    <TooltipTrigger asChild>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\" \n                        disabled\n                        data-testid={`button-whatsapp-${referral.id}`}\n                      >\n                        <MessageSquare className=\"h-4 w-4 mr-2\" />\n                        Join on WhatsApp\n                      </Button>\n                    </TooltipTrigger>\n                    <TooltipContent>\n                      <div className=\"flex items-center gap-2\">\n                        <AlertCircle className=\"h-4 w-4\" />\n                        <p>WhatsApp integration coming soon</p>\n                      </div>\n                    </TooltipContent>\n                  </Tooltip>\n                </div>\n              </div>\n            </Card>\n            ))}\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n","size_bytes":5323},"client/src/pages/patient/Diagnostics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { PatientShell } from \"@/components/PatientShell\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { StatusBadge } from \"@/components/ui/status-badge\";\nimport { ProgressDots } from \"@/components/ui/progress-dots\";\nimport { ActionButton } from \"@/components/ui/action-button\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { \n  MapPin, \n  Calendar, \n  Navigation, \n  Truck, \n  Download, \n  Clock,\n  Upload,\n  Loader2\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { api, type EnrichedDiagnosticsOrder } from \"@/lib/api\";\nimport { getUserFromStorage } from \"@/lib/storage\";\nimport { format } from \"date-fns\";\n\nfunction getStatusBadgeVariant(status: EnrichedDiagnosticsOrder[\"status\"]) {\n  switch (status) {\n    case \"completed\":\n      return \"success\";\n    case \"sample_collected\":\n      return \"info\";\n    case \"in_progress\":\n      return \"warning\";\n    case \"ordered\":\n    default:\n      return \"default\";\n  }\n}\n\nfunction getStatusLabel(status: EnrichedDiagnosticsOrder[\"status\"]) {\n  switch (status) {\n    case \"completed\":\n      return \"Results ready\";\n    case \"sample_collected\":\n      return \"Sample collected\";\n    case \"in_progress\":\n      return \"In progress\";\n    case \"ordered\":\n      return \"Awaiting sample\";\n    default:\n      return status;\n  }\n}\n\nfunction getProgressFromStatus(status: EnrichedDiagnosticsOrder[\"status\"]): { current: number; total: number } {\n  const total = 4;\n  switch (status) {\n    case \"ordered\":\n      return { current: 0, total };\n    case \"sample_collected\":\n      return { current: 1, total };\n    case \"in_progress\":\n      return { current: 2, total };\n    case \"completed\":\n      return { current: 3, total };\n    default:\n      return { current: 0, total };\n  }\n}\n\nfunction formatAppointmentDate(date: Date | string): string {\n  const d = typeof date === 'string' ? new Date(date) : date;\n  return format(d, \"yyyy-MM-dd 'at' HH:mm\");\n}\n\nexport default function Diagnostics() {\n  const { toast } = useToast();\n\n  const userData = getUserFromStorage() || {};\n  const userId = userData.id;\n  const role = userData.role;\n\n  const { data: orders = [], isLoading } = useQuery<EnrichedDiagnosticsOrder[]>({\n    queryKey: [\"/api/diagnostics/orders\", userId, role],\n    queryFn: () => api.diagnostics.listOrders(userId, role),\n    enabled: !!userId && !!role\n  });\n\n  const handleGetDirections = (order: EnrichedDiagnosticsOrder) => {\n    toast({\n      title: \"Opening directions\",\n      description: `Getting directions to ${order.labInfo?.name || \"the lab\"}`,\n    });\n  };\n\n  const handleBookPickup = (order: EnrichedDiagnosticsOrder) => {\n    toast({\n      title: \"Sample pickup\",\n      description: `Booking sample pickup for ${order.testType}`,\n    });\n  };\n\n  const handleDownloadResults = (order: EnrichedDiagnosticsOrder) => {\n    toast({\n      title: \"Downloading results\",\n      description: `Lab results for ${order.testType} downloaded`,\n    });\n  };\n\n  const handleChangeSlot = (order: EnrichedDiagnosticsOrder) => {\n    toast({\n      title: \"Change appointment\",\n      description: `Opening appointment scheduler for ${order.testType}`,\n    });\n  };\n\n  const handleGetUploadParameters = async () => {\n    const uploadId = `diagnostic-upload-${Date.now()}`;\n    const response = await fetch(`/api/object-storage/upload-url?path=.private/${uploadId}.pdf`);\n    const data = await response.json();\n    return {\n      method: \"PUT\" as const,\n      url: data.uploadURL,\n    };\n  };\n\n  const handleUploadComplete = (result: any) => {\n    toast({\n      title: \"Upload complete\",\n      description: \"Your diagnostic results have been uploaded successfully\",\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <PatientShell>\n        <div className=\"flex items-center justify-center py-12\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n        </div>\n      </PatientShell>\n    );\n  }\n\n  return (\n    <PatientShell>\n      <div className=\"container mx-auto px-4 py-6 max-w-4xl\">\n        {/* Info Banner */}\n        <div className=\"flex items-center gap-3 mb-6\" data-testid=\"info-banner\">\n          <p className=\"text-sm text-muted-foreground\">\n            Track orders and upload outside results\n          </p>\n          <Badge variant=\"secondary\" data-testid=\"badge-minimal-pii\">\n            Minimal PII\n          </Badge>\n        </div>\n\n        {/* Test Order Cards */}\n        {orders && orders.length === 0 ? (\n          <Card className=\"p-12 text-center\">\n            <p className=\"text-muted-foreground\">No diagnostic orders found</p>\n          </Card>\n        ) : null}\n        \n        {orders && orders.length > 0 && (\n          <div className=\"space-y-6 mb-8\">\n            {orders.map((order: EnrichedDiagnosticsOrder) => {\n              const progress = getProgressFromStatus(order.status);\n              const statusVariant = getStatusBadgeVariant(order.status);\n              const statusLabel = getStatusLabel(order.status);\n              const showDownload = order.status === \"completed\" && order.resultUrl;\n\n              return (\n                <Card\n                  key={order.id}\n                  className=\"p-4 hover-elevate\"\n                  data-testid={`card-order-${order.id}`}\n                >\n                  {/* Header Row: Progress Dots and Status Badge */}\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <ProgressDots\n                      total={progress.total}\n                      current={progress.current}\n                    />\n                    <StatusBadge variant={statusVariant}>\n                      {statusLabel}\n                    </StatusBadge>\n                  </div>\n\n                  {/* Test Name */}\n                  <h3 \n                    className=\"text-lg font-semibold text-foreground mb-3\"\n                    data-testid={`text-test-name-${order.id}`}\n                  >\n                    {order.testType}\n                  </h3>\n\n                  {/* Lab Location */}\n                  {order.labInfo && (\n                    <div className=\"flex items-start gap-2 mb-2\">\n                      <MapPin className=\"h-4 w-4 text-muted-foreground mt-0.5 flex-shrink-0\" />\n                      <p \n                        className=\"text-sm text-muted-foreground\"\n                        data-testid={`text-location-${order.id}`}\n                      >\n                        {order.labInfo.name}, {order.labInfo.location}\n                      </p>\n                    </div>\n                  )}\n\n                  {/* Date/Time */}\n                  <div className=\"flex items-center gap-2 mb-4\">\n                    <Calendar className=\"h-4 w-4 text-muted-foreground flex-shrink-0\" />\n                    <p \n                      className=\"text-sm text-muted-foreground\"\n                      data-testid={`text-date-${order.id}`}\n                    >\n                      {formatAppointmentDate(order.createdAt)}\n                    </p>\n                  </div>\n\n                  {/* Action Buttons */}\n                  <div className=\"flex flex-wrap gap-2 mb-3\">\n                    <ActionButton\n                      icon={<Navigation className=\"h-4 w-4\" />}\n                      label=\"Get directions\"\n                      onClick={() => handleGetDirections(order)}\n                    />\n                    <ActionButton\n                      icon={<Truck className=\"h-4 w-4\" />}\n                      label=\"Book sample pickup\"\n                      onClick={() => handleBookPickup(order)}\n                    />\n                    {showDownload && (\n                      <ActionButton\n                        icon={<Download className=\"h-4 w-4\" />}\n                        label=\"Download Results\"\n                        onClick={() => handleDownloadResults(order)}\n                      />\n                    )}\n                  </div>\n\n                  {/* Secondary Action: Change Slot */}\n                  {!showDownload && (\n                    <button\n                      onClick={() => handleChangeSlot(order)}\n                      className=\"flex items-center gap-2 text-sm text-primary hover:underline\"\n                      data-testid={`button-change-slot-${order.id}`}\n                    >\n                      <Clock className=\"h-4 w-4\" />\n                      <span>Change slot</span>\n                    </button>\n                  )}\n                </Card>\n              );\n            })}\n          </div>\n        )}\n\n        {/* File Upload Section */}\n        <div className=\"space-y-4\" data-testid=\"upload-section\">\n          <p className=\"text-sm text-muted-foreground\">\n            Attach PDF or image. Max 10MB each. Make sure your name and date are visible\n          </p>\n          <ObjectUploader\n            maxNumberOfFiles={5}\n            maxFileSize={10485760}\n            onGetUploadParameters={handleGetUploadParameters}\n            onComplete={handleUploadComplete}\n            buttonClassName=\"w-full sm:w-auto\"\n          >\n            <Upload className=\"h-4 w-4 mr-2\" />\n            Attach file\n          </ObjectUploader>\n        </div>\n      </div>\n    </PatientShell>\n  );\n}\n","size_bytes":9302},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/pages/diagnostics/Orders.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { StatusChip } from \"@/components/StatusChip\";\nimport { \n  Microscope, \n  LogOut,\n  Upload,\n  Loader2\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { api } from \"@/lib/api\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { getUserFromStorage } from \"@/lib/storage\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport type { UploadResult } from \"@uppy/core\";\n\nexport default function DiagnosticsOrders() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const userData = getUserFromStorage();\n  if (!userData?.id) {\n    toast({ title: \"Error\", description: \"User not logged in\", variant: \"destructive\" });\n    setLocation(\"/\");\n    return null;\n  }\n\n  const userId = userData.id;\n  const role = userData.role;\n\n  const { data: orders = [], isLoading, error } = useQuery({\n    queryKey: [\"/api/diagnostics/orders\", userId, role],\n    queryFn: () => api.diagnostics.listOrders(userId, role),\n    enabled: !!userId && !!role\n  });\n\n  const uploadMutation = useMutation({\n    mutationFn: ({ orderId, uploadURL }: { orderId: string; uploadURL: string }) => {\n      return apiRequest(\"PUT\", `/api/diagnostics/orders/${orderId}/upload`, { uploadURL, userId });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/diagnostics/orders\", userId, role] });\n      toast({\n        title: \"Results Uploaded\",\n        description: \"Lab results have been successfully uploaded\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Upload Failed\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"mediconnect_user\");\n    setLocation(\"/\");\n  };\n\n  const handleGetUploadParameters = async () => {\n    const response = await apiRequest(\"POST\", \"/api/objects/upload\", {});\n    return {\n      method: \"PUT\" as const,\n      url: response.uploadURL,\n    };\n  };\n\n  const handleUploadComplete = (orderId: string) => (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    if (result.successful && result.successful.length > 0) {\n      const uploadURL = result.successful[0].uploadURL;\n      if (uploadURL) {\n        uploadMutation.mutate({ orderId, uploadURL });\n      }\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <header className=\"border-b border-border bg-card\">\n          <div className=\"container mx-auto px-4 py-4 flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\">Diagnostics Portal</h1>\n              <p className=\"text-sm text-muted-foreground\">HealthLab Diagnostics</p>\n            </div>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={handleLogout}\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"h-4 w-4 mr-2\" />\n              Logout\n            </Button>\n          </div>\n        </header>\n        <main className=\"container mx-auto px-4 py-8 max-w-6xl\">\n          <div className=\"flex items-center justify-center py-12\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <header className=\"border-b border-border bg-card\">\n          <div className=\"container mx-auto px-4 py-4 flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\">Diagnostics Portal</h1>\n              <p className=\"text-sm text-muted-foreground\">HealthLab Diagnostics</p>\n            </div>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={handleLogout}\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"h-4 w-4 mr-2\" />\n              Logout\n            </Button>\n          </div>\n        </header>\n        <main className=\"container mx-auto px-4 py-8 max-w-6xl\">\n          <Card className=\"p-12 text-center\">\n            <p className=\"text-destructive\">Error loading orders: {error.message}</p>\n          </Card>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <header className=\"border-b border-border bg-card\">\n        <div className=\"container mx-auto px-4 py-4 flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-foreground\">Diagnostics Portal</h1>\n            <p className=\"text-sm text-muted-foreground\">HealthLab Diagnostics</p>\n          </div>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\"\n            onClick={handleLogout}\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"h-4 w-4 mr-2\" />\n            Logout\n          </Button>\n        </div>\n      </header>\n\n      <main className=\"container mx-auto px-4 py-8 max-w-6xl\">\n        <div className=\"mb-6 flex items-center justify-between\">\n          <h2 className=\"text-xl font-semibold text-foreground\">Lab Orders</h2>\n          <span className=\"text-sm text-muted-foreground\">{orders.length} total orders</span>\n        </div>\n\n        <div className=\"space-y-4\">\n          {orders.map((order) => (\n            <Card key={order.id} className=\"p-6\" data-testid={`order-${order.id}`}>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start justify-between gap-4\">\n                  <div className=\"flex items-start gap-3 flex-1\">\n                    <div className=\"h-10 w-10 rounded-lg bg-healthcare-diagnostics/10 flex items-center justify-center flex-shrink-0\">\n                      <Microscope className=\"h-5 w-5 text-healthcare-diagnostics\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2 mb-1\">\n                        <h3 className=\"font-semibold text-foreground\">{order.testType}</h3>\n                        <StatusChip status={order.status} />\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Order ID: <span className=\"font-mono\">{order.id}</span>\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"grid md:grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <p className=\"text-muted-foreground\">Test Type</p>\n                    <p className=\"font-medium text-foreground\">{order.testType}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-muted-foreground\">Order Date</p>\n                    <p className=\"font-medium text-foreground\">{order.createdAt ? new Date(order.createdAt).toLocaleDateString() : 'N/A'}</p>\n                  </div>\n                </div>\n\n                <div className=\"pt-4 border-t border-border\">\n                  <ObjectUploader\n                    maxNumberOfFiles={1}\n                    maxFileSize={52428800}\n                    onGetUploadParameters={handleGetUploadParameters}\n                    onComplete={handleUploadComplete(order.id)}\n                    buttonClassName=\"h-9\"\n                  >\n                    <Upload className=\"mr-2 h-4 w-4\" />\n                    Upload Results\n                  </ObjectUploader>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n\n        <div className=\"mt-8 bg-muted/50 rounded-lg p-4\">\n          <p className=\"text-sm text-muted-foreground\">\n            <strong>Privacy Note:</strong> This portal displays minimal patient information to maintain privacy. \n            Order IDs are used for tracking without exposing personal details.\n          </p>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":8202},"client/src/components/TabNav.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface Tab {\n  id: string;\n  label: string;\n  href?: string;\n  icon?: React.ReactNode;\n  onClick?: () => void;\n}\n\ninterface TabNavProps {\n  tabs: Tab[];\n  className?: string;\n  activeTab?: string;\n  onTabChange?: (tabId: string) => void;\n}\n\nexport function TabNav({ tabs, className, activeTab, onTabChange }: TabNavProps) {\n  const [location] = useLocation();\n\n  return (\n    <div className={cn(\"border-b border-border bg-background\", className)}>\n      <nav className=\"flex overflow-x-auto scrollbar-hide\" aria-label=\"Tabs\">\n        {tabs.map((tab) => {\n          // Determine if tab is active based on tab type\n          // State-based tabs (onClick): use activeTab prop\n          // Route-based tabs (href): use location matching\n          const isActive = tab.onClick \n            ? activeTab === tab.id \n            : tab.href && (location === tab.href || location.startsWith(tab.href + '/'));\n\n          const content = (\n            <>\n              {tab.icon && <span className=\"h-5 w-5\">{tab.icon}</span>}\n              {tab.label}\n              {isActive && (\n                <div className=\"absolute bottom-0 left-0 right-0 h-0.5 bg-primary\" />\n              )}\n            </>\n          );\n\n          const baseClassName = cn(\n            \"relative flex items-center gap-2 px-6 py-4 text-sm font-medium whitespace-nowrap transition-colors hover-elevate cursor-pointer\",\n            isActive ? \"text-primary\" : \"text-muted-foreground\"\n          );\n\n          // If tab has onClick, render as button-like element\n          if (tab.onClick) {\n            return (\n              <div\n                key={tab.id}\n                onClick={() => {\n                  tab.onClick?.();\n                  onTabChange?.(tab.id);\n                }}\n                data-testid={`tab-${tab.id}`}\n                className={baseClassName}\n              >\n                {content}\n              </div>\n            );\n          }\n\n          // Otherwise render as Link\n          return (\n            <Link\n              key={tab.id}\n              href={tab.href || \"#\"}\n              className={baseClassName}\n              data-testid={`tab-${tab.id}`}\n            >\n              {content}\n            </Link>\n          );\n        })}\n      </nav>\n    </div>\n  );\n}\n","size_bytes":2354},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/pages/patient/PrescriptionDetail.tsx":{"content":"import { useRoute, useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { StatusChip } from \"@/components/StatusChip\";\nimport { QRPanel } from \"@/components/QRPanel\";\nimport { ArrowLeft, Download, Pill, Loader2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { api } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\n\nexport default function PrescriptionDetail() {\n  const [, params] = useRoute(\"/patient/prescriptions/:id\");\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const prescriptionId = params?.id || \"\";\n\n  const { data: prescription, isLoading, error } = useQuery({\n    queryKey: [\"/api/prescriptions\", prescriptionId],\n    queryFn: () => api.prescriptions.get(prescriptionId),\n    enabled: !!prescriptionId\n  });\n\n  const downloadPdfMutation = useMutation({\n    mutationFn: () => api.prescriptions.downloadPdf(prescriptionId),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/prescriptions\", prescriptionId] });\n      toast({\n        title: \"PDF Downloaded\",\n        description: \"QR code has been disabled for security\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Download Failed\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleDownloadPdf = () => {\n    downloadPdfMutation.mutate();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <header className=\"border-b border-border bg-card\">\n          <div className=\"container mx-auto px-4 py-4 flex items-center gap-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setLocation(\"/patient/prescriptions\")}\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\">Prescription {params?.id}</h1>\n            </div>\n          </div>\n        </header>\n        <main className=\"container mx-auto px-4 py-8 max-w-5xl\">\n          <div className=\"flex items-center justify-center py-12\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  if (error || !prescription) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <header className=\"border-b border-border bg-card\">\n          <div className=\"container mx-auto px-4 py-4 flex items-center gap-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setLocation(\"/patient/prescriptions\")}\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\">Prescription {params?.id}</h1>\n            </div>\n          </div>\n        </header>\n        <main className=\"container mx-auto px-4 py-8 max-w-5xl\">\n          <Card className=\"p-12 text-center\">\n            <p className=\"text-destructive\">Error loading prescription</p>\n          </Card>\n        </main>\n      </div>\n    );\n  }\n\n  const items = prescription.items as any[];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <header className=\"border-b border-border bg-card\">\n        <div className=\"container mx-auto px-4 py-4 flex items-center gap-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setLocation(\"/patient/prescriptions\")}\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <div>\n            <h1 className=\"text-2xl font-bold text-foreground\">Prescription {params?.id}</h1>\n            <p className=\"text-sm text-muted-foreground\">Issued: {prescription.createdAt ? new Date(prescription.createdAt).toLocaleDateString() : 'N/A'}</p>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"container mx-auto px-4 py-8 max-w-5xl\">\n        <div className=\"grid lg:grid-cols-3 gap-6\">\n          <div className=\"lg:col-span-2 space-y-6\">\n            <Card className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h2 className=\"text-xl font-semibold text-foreground\">Prescription Details</h2>\n                <StatusChip status={prescription.status} />\n              </div>\n\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <p className=\"text-muted-foreground\">Issued Date</p>\n                    <p className=\"font-medium text-foreground\">{prescription.createdAt ? new Date(prescription.createdAt).toLocaleDateString() : 'N/A'}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-muted-foreground\">Status</p>\n                    <p className=\"font-medium text-foreground capitalize\">{prescription.status}</p>\n                  </div>\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"p-6\">\n              <h2 className=\"text-xl font-semibold text-foreground mb-6\">Medications</h2>\n              <div className=\"space-y-4\">\n                {items.map((item: any, idx: number) => (\n                  <div\n                    key={idx}\n                    className=\"border border-border rounded-lg p-4 space-y-3\"\n                    data-testid={`medication-${idx}`}\n                  >\n                    <div className=\"flex items-start gap-3\">\n                      <div className=\"h-10 w-10 rounded-lg bg-healthcare-prescription/10 flex items-center justify-center flex-shrink-0\">\n                        <Pill className=\"h-5 w-5 text-healthcare-prescription\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-semibold text-foreground text-lg\">{item.name}</h3>\n                        <p className=\"text-sm text-muted-foreground\">{item.dosage}</p>\n                      </div>\n                    </div>\n                    <div className=\"grid md:grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <p className=\"text-muted-foreground\">Frequency</p>\n                        <p className=\"font-medium text-foreground\">{item.frequency}</p>\n                      </div>\n                      {item.duration && (\n                        <div>\n                          <p className=\"text-muted-foreground\">Duration</p>\n                          <p className=\"font-medium text-foreground\">{item.duration}</p>\n                        </div>\n                      )}\n                    </div>\n                    {item.instructions && (\n                      <div className=\"pt-2 border-t border-border\">\n                        <p className=\"text-sm text-muted-foreground\">Instructions:</p>\n                        <p className=\"text-sm text-foreground\">{item.instructions}</p>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </Card>\n          </div>\n\n          <div className=\"space-y-6\">\n            <QRPanel\n              prescriptionId={prescription.id}\n              qrToken={prescription.qrDisabled ? undefined : (prescription.qrToken || undefined)}\n              disabledReason={prescription.qrDisabled ? \"QR disabled after PDF download\" : undefined}\n            />\n\n            <Card className=\"p-6 space-y-4\">\n              <h3 className=\"font-semibold text-foreground\">Actions</h3>\n              <Button\n                variant=\"outline\"\n                className=\"w-full\"\n                onClick={handleDownloadPdf}\n                disabled={!!prescription.qrDisabled || downloadPdfMutation.isPending}\n                data-testid=\"button-download-pdf\"\n              >\n                {downloadPdfMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Downloading...\n                  </>\n                ) : (\n                  <>\n                    <Download className=\"mr-2 h-4 w-4\" />\n                    Download PDF\n                  </>\n                )}\n              </Button>\n              {prescription.qrDisabled && (\n                <p className=\"text-xs text-muted-foreground\">\n                  PDF downloaded. QR code is now disabled for security.\n                </p>\n              )}\n            </Card>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":8809},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { makeAdapters } from \"./adapters\";\nimport { REGISTRY } from \"@shared/config\";\nimport type { PharmacyView, IntakeFormData } from \"@shared/schema\";\nimport PDFDocument from \"pdfkit\";\n\nconst adapters = makeAdapters(REGISTRY);\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth routes\n  app.post(\"/api/auth/request-otp\", async (req, res) => {\n    try {\n      const { phone } = req.body;\n      const result = await adapters.auth.requestOtp(phone);\n      res.json(result);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.post(\"/api/auth/verify-otp\", async (req, res) => {\n    try {\n      const { phone, code } = req.body;\n      const result = await adapters.auth.verifyOtp(phone, code);\n      res.json(result);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.post(\"/api/auth/mock-login\", async (req, res) => {\n    try {\n      const { email, phone, role } = req.body;\n      \n      // Validate email is provided and has valid format\n      if (!email || typeof email !== 'string') {\n        return res.status(400).json({ error: \"Email is required\" });\n      }\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(email)) {\n        return res.status(400).json({ error: \"Invalid email format\" });\n      }\n      \n      // Validate phone is provided and has valid format (10+ digits)\n      if (!phone || typeof phone !== 'string') {\n        return res.status(400).json({ error: \"Phone number is required\" });\n      }\n      const phoneDigits = phone.replace(/\\D/g, '');\n      if (phoneDigits.length < 10) {\n        return res.status(400).json({ error: \"Phone number must contain at least 10 digits\" });\n      }\n      \n      const user = await adapters.auth.mockLogin(email, phone, role);\n      await adapters.audit.log(\"mock_login\", user.id, \"auth\", { role });\n      res.json({ user });\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Consult routes\n  app.post(\"/api/consults/intake\", async (req, res) => {\n    try {\n      const { patientId, data } = req.body as { patientId: string; data: IntakeFormData };\n      \n      const intakeSummary = `Patient reports: ${data.symptoms}. Duration: ${data.duration}. Severity: ${data.severity}.`;\n      \n      const consult = await storage.createConsult({\n        patientId,\n        gpId: null,\n        status: \"intake\",\n        intakeSummary,\n        intakeData: data\n      });\n\n      await adapters.audit.log(\"intake_submitted\", patientId, consult.id, data);\n      await adapters.messaging.notify(\"intake_created\", { consultId: consult.id });\n\n      res.json(consult);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.post(\"/api/consults/:id/queue\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updated = await storage.updateConsult(id, { status: \"queued\" });\n      await adapters.messaging.notify(\"consult_queued\", { consultId: id });\n      res.json(updated);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.get(\"/api/consults\", async (req, res) => {\n    try {\n      const { role, userId } = req.query as { role: string; userId: string };\n      const consults = await storage.listConsults(role as any, userId);\n      res.json(consults);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.get(\"/api/consults/:id\", async (req, res) => {\n    try {\n      const consult = await storage.getConsult(req.params.id);\n      if (!consult) {\n        return res.status(404).json({ error: \"Consult not found\" });\n      }\n      res.json(consult);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Prescription routes\n  app.get(\"/api/prescriptions\", async (req, res) => {\n    try {\n      const { patientId } = req.query as { patientId: string };\n      const prescriptions = await storage.listPrescriptions(patientId);\n      res.json(prescriptions);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.get(\"/api/prescriptions/:id\", async (req, res) => {\n    try {\n      const prescription = await storage.getPrescription(req.params.id);\n      if (!prescription) {\n        return res.status(404).json({ error: \"Prescription not found\" });\n      }\n      res.json(prescription);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.get(\"/api/prescriptions/:id/qr-image\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { userId } = req.query as { userId?: string };\n      \n      // CRITICAL SECURITY: Verify user is authenticated\n      if (!userId) {\n        return res.status(401).json({ error: \"Unauthorized\" });\n      }\n\n      const prescription = await storage.getPrescription(id);\n      \n      if (!prescription) {\n        return res.status(404).json({ error: \"Prescription not found\" });\n      }\n\n      // CRITICAL SECURITY: Verify user has permission to view this prescription\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(401).json({ error: \"Unauthorized\" });\n      }\n\n      // Check if user owns this prescription OR is authorized role (pharmacy/gp)\n      const isOwner = prescription.patientId === userId;\n      const isAuthorizedRole = user.role === \"pharmacy\" || user.role === \"gp\";\n      \n      if (!isOwner && !isAuthorizedRole) {\n        return res.status(403).json({ error: \"Forbidden\" });\n      }\n\n      if (!prescription.qrToken) {\n        return res.status(400).json({ error: \"No QR token available\" });\n      }\n\n      if (prescription.qrDisabled) {\n        return res.status(400).json({ error: \"QR code is disabled\" });\n      }\n\n      const qrDataUri = await adapters.qr.generateQR(prescription.qrToken);\n      await adapters.audit.log(\"qr_image_viewed\", userId, id, { role: user.role });\n      res.json({ qrDataUri });\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.post(\"/api/prescriptions/:id/download-pdf\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const prescription = await storage.getPrescription(id);\n      \n      if (!prescription) {\n        return res.status(404).json({ error: \"Prescription not found\" });\n      }\n\n      if (prescription.fileUrl) {\n        return res.json({ ...prescription, fileUrl: prescription.fileUrl });\n      }\n\n      await adapters.qr.disableQr(id);\n\n      const doc = new PDFDocument({ margin: 50 });\n      const buffers: Buffer[] = [];\n\n      doc.on('data', buffers.push.bind(buffers));\n      doc.on('end', async () => {\n        const pdfBuffer = Buffer.concat(buffers);\n        \n        const { ObjectStorageService } = await import(\"./objectStorage\");\n        const objectStorageService = new ObjectStorageService();\n        \n        const fileUrl = await objectStorageService.uploadBuffer(pdfBuffer, \"application/pdf\");\n        \n        const objectFile = await objectStorageService.getObjectEntityFile(fileUrl);\n        const { setObjectAclPolicy } = await import(\"./objectAcl\");\n        await setObjectAclPolicy(objectFile, {\n          owner: prescription.patientId,\n          visibility: \"private\",\n        });\n\n        const updated = await storage.updatePrescription(id, {\n          pdfDownloaded: 1,\n          qrDisabled: 1,\n          fileUrl\n        });\n\n        await adapters.audit.log(\"pdf_downloaded\", prescription.patientId, id, {\n          qrDisabled: true,\n          fileUrl\n        });\n\n        res.json(updated);\n      });\n\n      doc.fontSize(20).text('PRESCRIPTION', { align: 'center' });\n      doc.moveDown();\n      doc.fontSize(12).text('='.repeat(60), { align: 'center' });\n      doc.moveDown(1.5);\n\n      doc.fontSize(11).text(`Prescription ID: ${prescription.id}`);\n      doc.text(`Date: ${new Date().toLocaleDateString()}`);\n      doc.moveDown(1.5);\n\n      doc.fontSize(14).text('PRESCRIPTION ITEMS:', { underline: true });\n      doc.moveDown();\n\n      const items = prescription.items as any[];\n      items.forEach((item: any, index: number) => {\n        doc.fontSize(12).text(`${index + 1}. ${item.name}`, { continued: false });\n        doc.fontSize(10)\n          .text(`   Dosage: ${item.dosage}`)\n          .text(`   Frequency: ${item.frequency}`)\n          .text(`   Duration: ${item.duration}`);\n        \n        if (item.instructions) {\n          doc.text(`   Instructions: ${item.instructions}`);\n        }\n        doc.moveDown(0.5);\n      });\n\n      doc.moveDown(1.5);\n      doc.fontSize(12).text('='.repeat(60));\n      doc.moveDown();\n\n      doc.fontSize(11).text(`QR Code: ${prescription.qrToken || 'N/A'}`);\n      doc.moveDown(0.5);\n      \n      doc.fontSize(11)\n        .fillColor('red')\n        .text('Status: DISABLED (PDF Downloaded)', { continued: false });\n      \n      doc.moveDown(1.5);\n      doc.fontSize(9)\n        .fillColor('gray')\n        .text('Note: The QR code for this prescription has been disabled upon PDF download for security purposes.', {\n          align: 'center',\n          width: 500\n        });\n\n      doc.end();\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Pharmacy routes\n  app.post(\"/api/pharmacy/verify\", async (req, res) => {\n    try {\n      const { qrToken } = req.body;\n      \n      const prescription = await storage.getPrescriptionByQrToken(qrToken);\n      \n      if (!prescription) {\n        return res.status(404).json({ error: \"Invalid QR code\" });\n      }\n\n      if (prescription.qrDisabled) {\n        return res.status(400).json({ error: \"QR code has been disabled\" });\n      }\n\n      const pharmacyView: PharmacyView = {\n        items: prescription.items as any,\n        prescriptionId: prescription.id,\n        meta: { noPII: true }\n      };\n\n      await adapters.audit.log(\"qr_verified\", \"pharmacy\", prescription.id, { qrToken });\n\n      res.json(pharmacyView);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Diagnostics routes\n  app.get(\"/api/diagnostics/orders\", async (req, res) => {\n    try {\n      const { userId, role } = req.query as { userId: string; role: string };\n      const orders = await storage.listDiagnosticsOrders(userId, role as any);\n      \n      const enrichedOrders = await Promise.all(\n        orders.map(async (order) => {\n          let labInfo = null;\n          if (order.labId) {\n            const lab = await storage.getUser(order.labId);\n            if (lab) {\n              const metadata = lab.metadata as { location?: string } | null;\n              labInfo = {\n                name: lab.name,\n                location: metadata?.location || \"Location not specified\"\n              };\n            }\n          }\n          \n          return {\n            id: order.id,\n            orderId: order.id,\n            testType: order.testType,\n            status: order.status,\n            createdAt: order.createdAt,\n            labId: order.labId,\n            labInfo,\n            resultUrl: order.resultUrl\n          };\n        })\n      );\n\n      res.json(enrichedOrders);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.put(\"/api/diagnostics/orders/:orderId/upload\", async (req, res) => {\n    try {\n      const { orderId } = req.params;\n      const { uploadURL, userId } = req.body;\n\n      if (!uploadURL) {\n        return res.status(400).json({ error: \"uploadURL is required\" });\n      }\n\n      if (!userId) {\n        return res.status(400).json({ error: \"userId is required\" });\n      }\n\n      const { ObjectStorageService } = await import(\"./objectStorage\");\n      const objectStorageService = new ObjectStorageService();\n      \n      const objectPath = await objectStorageService.trySetObjectEntityAclPolicy(\n        uploadURL,\n        {\n          owner: userId,\n          visibility: \"private\",\n        }\n      );\n\n      const updated = await storage.updateDiagnosticsOrder(orderId, {\n        status: \"completed\",\n        resultUrl: objectPath\n      });\n\n      await adapters.audit.log(\"results_uploaded\", userId, orderId, { resultUrl: objectPath });\n\n      res.json(updated);\n    } catch (error: any) {\n      console.error(\"Error uploading diagnostic result:\", error);\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Object storage routes\n  app.get(\"/objects/:objectPath(*)\", async (req, res) => {\n    const { ObjectStorageService, ObjectNotFoundError } = await import(\"./objectStorage\");\n    const { ObjectPermission } = await import(\"./objectAcl\");\n    const { userId } = req.query as { userId?: string };\n    \n    const objectStorageService = new ObjectStorageService();\n    try {\n      const objectFile = await objectStorageService.getObjectEntityFile(req.path);\n      const canAccess = await objectStorageService.canAccessObjectEntity({\n        objectFile,\n        userId: userId,\n        requestedPermission: ObjectPermission.READ,\n      });\n      if (!canAccess) {\n        return res.sendStatus(401);\n      }\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error checking object access:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  app.post(\"/api/objects/upload\", async (req, res) => {\n    const { ObjectStorageService } = await import(\"./objectStorage\");\n    const objectStorageService = new ObjectStorageService();\n    const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n    res.json({ uploadURL });\n  });\n\n  // Referral routes\n  app.get(\"/api/referrals\", async (req, res) => {\n    try {\n      const { userId, role } = req.query as { userId: string; role: string };\n      const referrals = await storage.listReferrals(userId, role as any);\n      res.json(referrals);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.post(\"/api/referrals\", async (req, res) => {\n    try {\n      const { gpId, patientId, specialistId, reason, notes } = req.body;\n      \n      const referral = await storage.createReferral({\n        gpId,\n        patientId,\n        specialistId,\n        status: \"proposed\",\n        reason,\n        notes\n      });\n\n      await adapters.messaging.notify(\"referral_created\", { referralId: referral.id });\n      res.json(referral);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Messages routes\n  app.get(\"/api/consults/:consultId/messages\", async (req, res) => {\n    try {\n      const messages = await storage.listMessages(req.params.consultId);\n      res.json(messages);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.post(\"/api/consults/:consultId/messages\", async (req, res) => {\n    try {\n      const { consultId } = req.params;\n      const { senderId, content } = req.body;\n      \n      const message = await storage.createMessage({\n        consultId,\n        senderId,\n        content\n      });\n\n      res.json(message);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":15542},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"server/adapters/messaging.whatsappStub.ts":{"content":"import type { NotificationPort } from \"@shared/ports\";\n\nexport class WhatsAppMessagingStub implements NotificationPort {\n  async notify(topic: string, payload: any): Promise<void> {\n    console.log(`[WhatsAppStub] Notification sent:`, { topic, payload });\n  }\n}\n","size_bytes":262},"server/adapters/audit.stub.ts":{"content":"import type { AuditPort } from \"@shared/ports\";\n\nexport class AuditStub implements AuditPort {\n  private logs: any[] = [];\n\n  async log(event: string, actor: string, resource: string, meta?: any): Promise<void> {\n    const logEntry = {\n      event,\n      actor,\n      resource,\n      meta,\n      timestamp: new Date().toISOString()\n    };\n    this.logs.push(logEntry);\n    console.log(`[AuditStub] Log:`, logEntry);\n  }\n\n  getLogs(): any[] {\n    return this.logs;\n  }\n}\n","size_bytes":470},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"shared/config.ts":{"content":"export const FLAGS = {\n  AUTH_WHATSAPP: false,\n  MAPS: false,\n  PAYMENTS: false,\n  REAL_QR: false,\n  REAL_UPLOADS: false,\n} as const;\n\nexport const REGISTRY = {\n  auth: 'auth.whatsappStub',\n  messaging: 'messaging.whatsappStub',\n  qr: FLAGS.REAL_QR ? 'qr.vendorX' : 'qr.localStub',\n  storage: FLAGS.REAL_UPLOADS ? 'storage.s3' : 'storage.localStub',\n  db: 'db.memoryRepo',\n} as const;\n\nexport type FlagKey = keyof typeof FLAGS;\nexport type AdapterKey = keyof typeof REGISTRY;\n","size_bytes":476},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/pages/legal/Terms.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { ArrowLeft } from \"lucide-react\";\n\nexport default function Terms() {\n  const [, setLocation] = useLocation();\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <header className=\"border-b border-border bg-card\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setLocation(\"/\")}\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back\n          </Button>\n        </div>\n      </header>\n\n      <main className=\"container mx-auto px-4 py-8 max-w-4xl\">\n        <Card className=\"p-8 md:p-12\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-6\">Terms of Service</h1>\n          \n          <div className=\"prose prose-sm max-w-none space-y-6 text-foreground\">\n            <section>\n              <h2 className=\"text-xl font-semibold mb-3\">1. Acceptance of Terms</h2>\n              <p className=\"text-muted-foreground\">\n                By accessing and using Mediconnect, you accept and agree to be bound by the terms and provision of this agreement.\n              </p>\n            </section>\n\n            <section>\n              <h2 className=\"text-xl font-semibold mb-3\">2. Use of Service</h2>\n              <p className=\"text-muted-foreground\">\n                Mediconnect provides a platform connecting patients with healthcare providers. This is a functional prototype and should not be used for actual medical consultations.\n              </p>\n            </section>\n\n            <section>\n              <h2 className=\"text-xl font-semibold mb-3\">3. Privacy and Data Protection</h2>\n              <p className=\"text-muted-foreground\">\n                We are committed to protecting your privacy. Please review our Privacy Policy to understand how we collect, use, and safeguard your information.\n              </p>\n            </section>\n\n            <section>\n              <h2 className=\"text-xl font-semibold mb-3\">4. Medical Disclaimer</h2>\n              <p className=\"text-muted-foreground\">\n                This platform is a functional prototype only. Always consult with qualified healthcare professionals for medical advice, diagnosis, or treatment.\n              </p>\n            </section>\n\n            <section>\n              <h2 className=\"text-xl font-semibold mb-3\">5. Modifications to Service</h2>\n              <p className=\"text-muted-foreground\">\n                We reserve the right to modify or discontinue the service at any time without notice.\n              </p>\n            </section>\n\n            <p className=\"text-sm text-muted-foreground pt-6 border-t border-border\">\n              Last Updated: January 2024\n            </p>\n          </div>\n        </Card>\n      </main>\n    </div>\n  );\n}\n","size_bytes":2952},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"server/adapters/auth.whatsappStub.ts":{"content":"import type { AuthPort } from \"@shared/ports\";\nimport type { User, UserRole } from \"@shared/schema\";\nimport type { IStorage } from \"../storage\";\nimport { randomUUID } from \"crypto\";\n\nexport class WhatsAppAuthStub implements AuthPort {\n  constructor(private storage: IStorage) {}\n\n  async requestOtp(phone: string): Promise<{ success: boolean; message: string }> {\n    console.log(`[WhatsAppStub] OTP requested for ${phone}`);\n    return {\n      success: true,\n      message: `OTP sent to ${phone} (stub mode, any code works)`\n    };\n  }\n\n  async verifyOtp(phone: string, code: string): Promise<{ success: boolean; user?: User }> {\n    console.log(`[WhatsAppStub] Verifying OTP ${code} for ${phone}`);\n    \n    return {\n      success: true,\n      user: {\n        id: randomUUID(),\n        name: \"Demo User\",\n        phone,\n        email: null,\n        role: \"patient\" as UserRole,\n        metadata: {}\n      }\n    };\n  }\n\n  async mockLogin(email: string, phone: string, role: UserRole): Promise<User> {\n    console.log(`[WhatsAppStub] Mock login: ${email} (${phone}) as ${role}`);\n    \n    // Try to find existing user by email (primary identifier)\n    const existingUserByEmail = await this.storage.getUserByEmail(email);\n    if (existingUserByEmail) {\n      console.log(`[WhatsAppStub] Found existing user by email: ${existingUserByEmail.id}`);\n      \n      // Update phone if provided and different (optional for existing users)\n      if (phone && existingUserByEmail.phone !== phone) {\n        console.log(`[WhatsAppStub] Updating phone for user: ${existingUserByEmail.id}`);\n        await this.storage.updateUser(existingUserByEmail.id, { phone });\n        return { ...existingUserByEmail, phone };\n      }\n      \n      return existingUserByEmail;\n    }\n    \n    // For new users, both email and phone are required\n    if (!email) {\n      throw new Error(\"Email is required for new user creation\");\n    }\n    if (!phone) {\n      throw new Error(\"Phone number is required for new user creation\");\n    }\n    \n    const roleNames: Record<UserRole, string> = {\n      patient: \"Demo Patient\",\n      gp: \"Dr. Sarah Johnson\",\n      specialist: \"Dr. David Williams\",\n      pharmacy: \"HealthCare Pharmacy\",\n      diagnostics: \"HealthLab Diagnostics\"\n    };\n\n    console.log(`[WhatsAppStub] Creating new user for ${email} with phone ${phone}`);\n    const newUser = await this.storage.createUser({\n      name: roleNames[role],\n      phone,\n      email,\n      role,\n      metadata: {}\n    });\n\n    return newUser;\n  }\n}\n","size_bytes":2512},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/pages/gp/Login.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { RoleLogin } from \"@/components/RoleLogin\";\nimport { api } from \"@/lib/api\";\n\nexport default function GPLogin() {\n  const [, setLocation] = useLocation();\n\n  const handleLogin = async (email: string, phone: string) => {\n    const { user } = await api.auth.mockLogin(email, phone, \"gp\");\n    localStorage.setItem(\"mediconnect_user\", JSON.stringify(user));\n    setLocation(\"/gp\");\n  };\n\n  return <RoleLogin role=\"gp\" onLogin={handleLogin} />;\n}\n","size_bytes":489},"server/adapters/storage.localStub.ts":{"content":"import type { StoragePort } from \"@shared/ports\";\n\nexport class StorageLocalStub implements StoragePort {\n  private storage = new Map<string, any>();\n\n  async put(file: any): Promise<string> {\n    const url = `local://file-${Date.now()}`;\n    this.storage.set(url, file);\n    console.log(`[StorageStub] File stored at: ${url}`);\n    return url;\n  }\n\n  async get(url: string): Promise<any> {\n    console.log(`[StorageStub] Retrieving file: ${url}`);\n    return this.storage.get(url);\n  }\n}\n","size_bytes":489},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"shared/ports.ts":{"content":"import type { \n  User, \n  Consult, \n  Prescription, \n  Referral, \n  DiagnosticsOrder,\n  Message,\n  PharmacyView,\n  IntakeFormData,\n  UserRole\n} from \"./schema\";\n\n// Auth Port - handles authentication and OTP\nexport interface AuthPort {\n  requestOtp(phone: string): Promise<{ success: boolean; message: string }>;\n  verifyOtp(phone: string, code: string): Promise<{ success: boolean; user?: User }>;\n  mockLogin(identifier: string, role: UserRole): Promise<User>;\n}\n\n// Consult Port - handles consultations\nexport interface ConsultPort {\n  startIntake(patientId: string, data: IntakeFormData): Promise<Consult>;\n  queueConsult(patientId: string): Promise<Consult>;\n  listConsults(role: UserRole, userId: string): Promise<Consult[]>;\n  getConsult(id: string): Promise<Consult | undefined>;\n  updateConsultStatus(id: string, status: string): Promise<Consult>;\n}\n\n// Referral Port - handles specialist referrals\nexport interface ReferralPort {\n  proposeSpecialists(gpId: string, patientId: string, reason: string): Promise<User[]>;\n  createReferral(gpId: string, patientId: string, specialistId: string, reason: string, notes?: string): Promise<Referral>;\n  listReferrals(userId: string, role: UserRole): Promise<Referral[]>;\n}\n\n// Prescription Port - handles prescriptions and QR codes\nexport interface PrescriptionPort {\n  listPrescriptions(patientId: string): Promise<Prescription[]>;\n  getPrescription(id: string): Promise<Prescription | undefined>;\n  renderQr(id: string): Promise<string>;\n  markPdfDownloaded(id: string): Promise<Prescription>;\n  createPrescription(data: any): Promise<Prescription>;\n}\n\n// Pharmacy Port - handles pharmacy QR verification\nexport interface PharmacyPort {\n  resolveQrToken(token: string): Promise<PharmacyView>;\n}\n\n// Diagnostics Port - handles lab orders\nexport interface DiagnosticsPort {\n  listOrders(userId: string, role: UserRole): Promise<DiagnosticsOrder[]>;\n  uploadResult(orderId: string, fileData: any): Promise<DiagnosticsOrder>;\n  getOrder(id: string): Promise<DiagnosticsOrder | undefined>;\n}\n\n// Notification Port - handles notifications (stub)\nexport interface NotificationPort {\n  notify(topic: string, payload: any): Promise<void>;\n}\n\n// Storage Port - handles file storage (stub)\nexport interface StoragePort {\n  put(file: any): Promise<string>;\n  get(url: string): Promise<any>;\n}\n\n// Audit Port - handles audit logging\nexport interface AuditPort {\n  log(event: string, actor: string, resource: string, meta?: any): Promise<void>;\n}\n\n// Message Port - handles chat messages\nexport interface MessagePort {\n  listMessages(consultId: string): Promise<Message[]>;\n  sendMessage(consultId: string, senderId: string, content: string): Promise<Message>;\n}\n","size_bytes":2702},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest<T = any>(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<T> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return await res.json();\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1398},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 220 13% 18%;\n\n  --border: 220 13% 91%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 220 13% 18%;\n\n  --card-border: 220 13% 91%;\n\n  --sidebar: 220 14% 98%;\n\n  --sidebar-foreground: 220 13% 18%;\n\n  --sidebar-border: 220 13% 91%;\n\n  --sidebar-primary: 245 80% 60%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 220 14% 94%;\n\n  --sidebar-accent-foreground: 220 13% 18%;\n\n  --sidebar-ring: 245 80% 60%;\n\n  --popover: 0 0% 100%;\n\n  --popover-foreground: 220 13% 18%;\n\n  --popover-border: 220 13% 91%;\n\n  --primary: 245 80% 60%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 220 9% 88%;\n\n  --secondary-foreground: 220 13% 18%;\n\n  --muted: 220 14% 96%;\n\n  --muted-foreground: 220 9% 46%;\n\n  --accent: 160 84% 39%;\n\n  --accent-foreground: 0 0% 100%;\n\n  --destructive: 0 72% 51%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --success: 160 84% 39%;\n\n  --success-foreground: 0 0% 100%;\n\n  --warning: 38 92% 50%;\n\n  --warning-foreground: 220 13% 18%;\n\n  --info: 200 95% 45%;\n\n  --info-foreground: 0 0% 100%;\n\n  --input: 220 13% 91%;\n  --ring: 245 80% 60%;\n  --chart-1: 245 80% 60%;\n  --chart-2: 160 84% 39%;\n  --chart-3: 260 60% 50%;\n  --chart-4: 190 70% 45%;\n  --chart-5: 38 92% 50%;\n\n  --font-sans: Inter, -apple-system, BlinkMacSystemFont, \"Segoe UI\", sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: \"JetBrains Mono\", Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 13% 18% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 13% 18% / 0.08);\n  --shadow-sm: 0px 2px 4px -1px hsl(220 13% 18% / 0.06), 0px 1px 2px -1px hsl(220 13% 18% / 0.06);\n  --shadow: 0px 4px 6px -1px hsl(220 13% 18% / 0.08), 0px 2px 4px -1px hsl(220 13% 18% / 0.06);\n  --shadow-md: 0px 6px 12px -2px hsl(220 13% 18% / 0.10), 0px 3px 6px -2px hsl(220 13% 18% / 0.05);\n  --shadow-lg: 0px 10px 20px -4px hsl(220 13% 18% / 0.12), 0px 4px 8px -2px hsl(220 13% 18% / 0.06);\n  --shadow-xl: 0px 20px 30px -6px hsl(220 13% 18% / 0.15), 0px 8px 12px -4px hsl(220 13% 18% / 0.08);\n  --shadow-2xl: 0px 25px 40px -8px hsl(220 13% 18% / 0.20);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 18% 12%;\n\n  --foreground: 220 5% 95%;\n\n  --border: 220 12% 24%;\n\n  --card: 220 15% 18%;\n\n  --card-foreground: 220 5% 95%;\n\n  --card-border: 220 12% 24%;\n\n  --sidebar: 220 15% 16%;\n\n  --sidebar-foreground: 220 5% 95%;\n\n  --sidebar-border: 220 12% 24%;\n\n  --sidebar-primary: 245 75% 65%;\n\n  --sidebar-primary-foreground: 220 18% 12%;\n\n  --sidebar-accent: 220 12% 22%;\n\n  --sidebar-accent-foreground: 220 5% 95%;\n\n  --sidebar-ring: 245 75% 65%;\n\n  --popover: 220 15% 18%;\n\n  --popover-foreground: 220 5% 95%;\n\n  --popover-border: 220 12% 24%;\n\n  --primary: 245 75% 65%;\n\n  --primary-foreground: 220 18% 12%;\n\n  --secondary: 220 12% 24%;\n\n  --secondary-foreground: 220 5% 95%;\n\n  --muted: 220 12% 22%;\n\n  --muted-foreground: 220 5% 70%;\n\n  --accent: 160 80% 45%;\n\n  --accent-foreground: 220 18% 12%;\n\n  --destructive: 0 68% 55%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --success: 160 80% 45%;\n\n  --success-foreground: 220 18% 12%;\n\n  --warning: 38 88% 55%;\n\n  --warning-foreground: 220 18% 12%;\n\n  --info: 200 90% 50%;\n\n  --info-foreground: 220 18% 12%;\n\n  --input: 220 12% 35%;\n  --ring: 245 75% 65%;\n  --chart-1: 245 75% 65%;\n  --chart-2: 160 80% 45%;\n  --chart-3: 260 65% 65%;\n  --chart-4: 190 75% 60%;\n  --chart-5: 38 88% 55%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.15);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.20);\n  --shadow-sm: 0px 2px 4px -1px hsl(0 0% 0% / 0.18), 0px 1px 2px -1px hsl(0 0% 0% / 0.15);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.22), 0px 2px 4px -1px hsl(0 0% 0% / 0.18);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.25), 0px 3px 6px -2px hsl(0 0% 0% / 0.15);\n  --shadow-lg: 0px 10px 20px -4px hsl(0 0% 0% / 0.30), 0px 4px 8px -2px hsl(0 0% 0% / 0.20);\n  --shadow-xl: 0px 20px 30px -6px hsl(0 0% 0% / 0.35), 0px 8px 12px -4px hsl(0 0% 0% / 0.25);\n  --shadow-2xl: 0px 25px 40px -8px hsl(0 0% 0% / 0.40);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}\n","size_bytes":11202},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/pages/patient/Prescriptions.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { StatusChip } from \"@/components/StatusChip\";\nimport { ArrowLeft, Pill, ArrowRight, Loader2 } from \"lucide-react\";\nimport { api } from \"@/lib/api\";\nimport { getUserFromStorage } from \"@/lib/storage\";\n\nexport default function Prescriptions() {\n  const [, setLocation] = useLocation();\n\n  const userData = getUserFromStorage() || {};\n  const patientId = userData.id;\n\n  const { data: prescriptions = [], isLoading, error } = useQuery({\n    queryKey: [\"/api/prescriptions\", patientId],\n    queryFn: () => api.prescriptions.list(patientId),\n    enabled: !!patientId\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <header className=\"border-b border-border bg-card\">\n          <div className=\"container mx-auto px-4 py-4 flex items-center gap-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setLocation(\"/patient/home\")}\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\">Prescriptions</h1>\n              <p className=\"text-sm text-muted-foreground\">View and manage your medications</p>\n            </div>\n          </div>\n        </header>\n        <main className=\"container mx-auto px-4 py-8 max-w-4xl\">\n          <div className=\"flex items-center justify-center py-12\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <header className=\"border-b border-border bg-card\">\n          <div className=\"container mx-auto px-4 py-4 flex items-center gap-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setLocation(\"/patient/home\")}\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\">Prescriptions</h1>\n              <p className=\"text-sm text-muted-foreground\">View and manage your medications</p>\n            </div>\n          </div>\n        </header>\n        <main className=\"container mx-auto px-4 py-8 max-w-4xl\">\n          <Card className=\"p-12 text-center\">\n            <p className=\"text-destructive\">Error loading prescriptions: {error.message}</p>\n          </Card>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <header className=\"border-b border-border bg-card\">\n        <div className=\"container mx-auto px-4 py-4 flex items-center gap-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setLocation(\"/patient/home\")}\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <div>\n            <h1 className=\"text-2xl font-bold text-foreground\">Prescriptions</h1>\n            <p className=\"text-sm text-muted-foreground\">View and manage your medications</p>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"container mx-auto px-4 py-8 max-w-4xl\">\n        {prescriptions.length === 0 ? (\n          <Card className=\"p-12 text-center\">\n            <Pill className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold text-foreground mb-2\">No Prescriptions</h3>\n            <p className=\"text-muted-foreground\">You don't have any prescriptions yet</p>\n          </Card>\n        ) : (\n          <div className=\"space-y-4\">\n            {prescriptions.map((prescription) => (\n              <Card\n                key={prescription.id}\n                className=\"p-6 hover-elevate active-elevate-2 cursor-pointer\"\n                onClick={() => setLocation(`/patient/prescriptions/${prescription.id}`)}\n                data-testid={`prescription-card-${prescription.id}`}\n              >\n                <div className=\"flex items-start justify-between gap-4\">\n                  <div className=\"flex-1 space-y-3\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"h-10 w-10 rounded-lg bg-healthcare-prescription/10 flex items-center justify-center flex-shrink-0\">\n                        <Pill className=\"h-5 w-5 text-healthcare-prescription\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <h3 className=\"font-semibold text-foreground\">Prescription {prescription.id}</h3>\n                          <StatusChip status={prescription.status} />\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Issued: {new Date(prescription.createdAt).toLocaleDateString()}\n                        </p>\n                      </div>\n                    </div>\n\n                    <div className=\"pl-13 space-y-1\">\n                      {prescription.items.map((item, idx) => (\n                        <p key={idx} className=\"text-sm text-foreground\">\n                          <span className=\"font-medium\">{item.name}</span> - {item.dosage}, {item.frequency}\n                        </p>\n                      ))}\n                    </div>\n                  </div>\n\n                  <ArrowRight className=\"h-5 w-5 text-muted-foreground flex-shrink-0 mt-2\" />\n                </div>\n              </Card>\n            ))}\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n","size_bytes":5903},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/pages/specialist/Login.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { RoleLogin } from \"@/components/RoleLogin\";\nimport { api } from \"@/lib/api\";\n\nexport default function SpecialistLogin() {\n  const [, setLocation] = useLocation();\n\n  const handleLogin = async (email: string, phone: string) => {\n    const { user } = await api.auth.mockLogin(email, phone, \"specialist\");\n    localStorage.setItem(\"mediconnect_user\", JSON.stringify(user));\n    setLocation(\"/specialist\");\n  };\n\n  return <RoleLogin role=\"specialist\" onLogin={handleLogin} />;\n}\n","size_bytes":521},"client/src/components/QRPanel.tsx":{"content":"import { QrCode, AlertCircle } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\nimport { cn } from \"@/lib/utils\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { getUserFromStorage } from \"@/lib/storage\";\n\ninterface QRPanelProps {\n  prescriptionId?: string;\n  qrToken?: string;\n  disabledReason?: string;\n  className?: string;\n}\n\nexport function QRPanel({ prescriptionId, qrToken, disabledReason, className }: QRPanelProps) {\n  const isDisabled = !!disabledReason;\n  const userData = getUserFromStorage();\n  const userId = userData?.id;\n\n  const { data: qrData, isLoading } = useQuery({\n    queryKey: [\"/api/prescriptions\", prescriptionId, \"qr-image\"],\n    queryFn: () => api.prescriptions.getQrImage(prescriptionId!, userId!),\n    enabled: !isDisabled && !!prescriptionId && !!qrToken && !!userId,\n  });\n\n  return (\n    <Card className={cn(\"p-6\", className)}>\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-semibold text-foreground\">QR Code</h3>\n          {isDisabled && (\n            <span className=\"text-xs font-medium text-destructive flex items-center gap-1\">\n              <AlertCircle className=\"h-3 w-3\" />\n              Disabled\n            </span>\n          )}\n        </div>\n\n        <div\n          className={cn(\n            \"aspect-square max-w-sm mx-auto rounded-lg flex items-center justify-center transition-all\",\n            isDisabled\n              ? \"border-2 border-dashed border-muted bg-muted/30\"\n              : \"border-2 border-primary bg-primary/5\"\n          )}\n          data-testid=\"qr-panel\"\n        >\n          {isDisabled ? (\n            <div className=\"text-center p-6 space-y-2\">\n              <QrCode className=\"h-16 w-16 text-muted-foreground mx-auto opacity-30\" />\n              <p className=\"text-sm text-muted-foreground\">{disabledReason}</p>\n            </div>\n          ) : qrToken && qrData?.qrDataUri ? (\n            <div className=\"text-center p-4\">\n              <div className=\"bg-white p-4 rounded-lg inline-block\">\n                <img \n                  src={qrData.qrDataUri} \n                  alt=\"Prescription QR Code\" \n                  className=\"h-48 w-48\"\n                  data-testid=\"qr-code-image\"\n                />\n                <p className=\"text-xs text-muted-foreground mt-2 font-mono\">{qrToken.slice(0, 12)}...</p>\n              </div>\n            </div>\n          ) : qrToken && isLoading ? (\n            <div className=\"text-center p-6\">\n              <QrCode className=\"h-16 w-16 text-muted-foreground mx-auto animate-pulse\" />\n              <p className=\"text-sm text-muted-foreground mt-2\">Generating QR code...</p>\n            </div>\n          ) : (\n            <div className=\"text-center p-6\">\n              <QrCode className=\"h-16 w-16 text-muted-foreground mx-auto\" />\n              <p className=\"text-sm text-muted-foreground mt-2\">No QR code available</p>\n            </div>\n          )}\n        </div>\n\n        {!isDisabled && (\n          <p className=\"text-xs text-center text-muted-foreground\">\n            Show this QR code to the pharmacy to dispense your prescription\n          </p>\n        )}\n      </div>\n    </Card>\n  );\n}\n","size_bytes":3258},"client/src/lib/api.ts":{"content":"import { apiRequest } from \"./queryClient\";\nimport type { \n  User, \n  Consult, \n  Prescription, \n  DiagnosticsOrder,\n  Referral,\n  Message,\n  PharmacyView,\n  IntakeFormData,\n  UserRole\n} from \"@shared/schema\";\n\nexport type EnrichedDiagnosticsOrder = {\n  id: string;\n  orderId: string;\n  testType: string;\n  status: \"ordered\" | \"sample_collected\" | \"in_progress\" | \"completed\";\n  createdAt: Date | string;\n  labId: string | null;\n  labInfo: {\n    name: string;\n    location: string;\n  } | null;\n  resultUrl: string | null;\n};\n\nexport const api = {\n  auth: {\n    async mockLogin(email: string, phone: string, role: UserRole): Promise<{ user: User }> {\n      return apiRequest(\"POST\", \"/api/auth/mock-login\", { email, phone, role });\n    },\n    async requestOtp(phone: string) {\n      return apiRequest(\"POST\", \"/api/auth/request-otp\", { phone });\n    },\n    async verifyOtp(phone: string, code: string) {\n      return apiRequest(\"POST\", \"/api/auth/verify-otp\", { phone, code });\n    }\n  },\n\n  consults: {\n    async startIntake(patientId: string, data: IntakeFormData): Promise<Consult> {\n      return apiRequest(\"POST\", \"/api/consults/intake\", { patientId, data });\n    },\n    async queueConsult(id: string): Promise<Consult> {\n      return apiRequest(\"POST\", `/api/consults/${id}/queue`, {});\n    },\n    async listConsults(role: UserRole, userId: string): Promise<Consult[]> {\n      return apiRequest(\"GET\", `/api/consults?role=${role}&userId=${userId}`, undefined);\n    },\n    async getConsult(id: string): Promise<Consult> {\n      return apiRequest(\"GET\", `/api/consults/${id}`, undefined);\n    }\n  },\n\n  prescriptions: {\n    async list(patientId: string): Promise<Prescription[]> {\n      return apiRequest(\"GET\", `/api/prescriptions?patientId=${patientId}`, undefined);\n    },\n    async get(id: string): Promise<Prescription> {\n      return apiRequest(\"GET\", `/api/prescriptions/${id}`, undefined);\n    },\n    async getQrImage(id: string, userId: string): Promise<{ qrDataUri: string }> {\n      return apiRequest(\"GET\", `/api/prescriptions/${id}/qr-image?userId=${userId}`, undefined);\n    },\n    async downloadPdf(id: string): Promise<Prescription> {\n      return apiRequest(\"POST\", `/api/prescriptions/${id}/download-pdf`, {});\n    }\n  },\n\n  pharmacy: {\n    async verifyQr(qrToken: string): Promise<PharmacyView> {\n      return apiRequest(\"POST\", \"/api/pharmacy/verify\", { qrToken });\n    }\n  },\n\n  diagnostics: {\n    async listOrders(userId: string, role: UserRole): Promise<EnrichedDiagnosticsOrder[]> {\n      return apiRequest(\"GET\", `/api/diagnostics/orders?userId=${userId}&role=${role}`, undefined);\n    },\n    async uploadResult(orderId: string, fileData: any): Promise<DiagnosticsOrder> {\n      return apiRequest(\"POST\", `/api/diagnostics/orders/${orderId}/upload`, { fileData });\n    }\n  },\n\n  referrals: {\n    async list(userId: string, role: UserRole): Promise<Referral[]> {\n      return apiRequest(\"GET\", `/api/referrals?userId=${userId}&role=${role}`, undefined);\n    },\n    async create(data: { gpId: string; patientId: string; specialistId: string; reason: string; notes?: string }): Promise<Referral> {\n      return apiRequest(\"POST\", \"/api/referrals\", data);\n    }\n  },\n\n  messages: {\n    async list(consultId: string): Promise<Message[]> {\n      return apiRequest(\"GET\", `/api/consults/${consultId}/messages`, undefined);\n    },\n    async send(consultId: string, senderId: string, content: string): Promise<Message> {\n      return apiRequest(\"POST\", `/api/consults/${consultId}/messages`, { senderId, content });\n    }\n  }\n};\n","size_bytes":3548},"client/src/pages/legal/Privacy.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { ArrowLeft } from \"lucide-react\";\n\nexport default function Privacy() {\n  const [, setLocation] = useLocation();\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <header className=\"border-b border-border bg-card\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setLocation(\"/\")}\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back\n          </Button>\n        </div>\n      </header>\n\n      <main className=\"container mx-auto px-4 py-8 max-w-4xl\">\n        <Card className=\"p-8 md:p-12\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-6\">Privacy Policy</h1>\n          \n          <div className=\"prose prose-sm max-w-none space-y-6 text-foreground\">\n            <section>\n              <h2 className=\"text-xl font-semibold mb-3\">1. Information We Collect</h2>\n              <p className=\"text-muted-foreground\">\n                We collect information necessary to provide healthcare services, including personal details, health information, and usage data.\n              </p>\n            </section>\n\n            <section>\n              <h2 className=\"text-xl font-semibold mb-3\">2. How We Use Your Information</h2>\n              <p className=\"text-muted-foreground\">\n                Your information is used to facilitate healthcare consultations, maintain medical records, and improve our services. We implement strict access controls and data minimization principles.\n              </p>\n            </section>\n\n            <section>\n              <h2 className=\"text-xl font-semibold mb-3\">3. Data Sharing</h2>\n              <p className=\"text-muted-foreground\">\n                We share your health information only with authorized healthcare providers involved in your care. Pharmacies receive prescription details without personal identifying information.\n              </p>\n            </section>\n\n            <section>\n              <h2 className=\"text-xl font-semibold mb-3\">4. Security Measures</h2>\n              <p className=\"text-muted-foreground\">\n                We employ industry-standard security measures including encryption, access controls, and regular security audits to protect your data.\n              </p>\n            </section>\n\n            <section>\n              <h2 className=\"text-xl font-semibold mb-3\">5. Your Rights</h2>\n              <p className=\"text-muted-foreground\">\n                You have the right to access, correct, or delete your personal information. You can also manage your consent preferences in your profile settings.\n              </p>\n            </section>\n\n            <section>\n              <h2 className=\"text-xl font-semibold mb-3\">6. Data Retention</h2>\n              <p className=\"text-muted-foreground\">\n                We retain your health records as required by law and medical best practices. You can request deletion subject to legal and regulatory requirements.\n              </p>\n            </section>\n\n            <p className=\"text-sm text-muted-foreground pt-6 border-t border-border\">\n              Last Updated: January 2024\n            </p>\n          </div>\n        </Card>\n      </main>\n    </div>\n  );\n}\n","size_bytes":3419},"client/src/pages/patient/PatientHome.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { PatientShell } from \"@/components/PatientShell\";\nimport { FamilySwitcher, type FamilyMember } from \"@/components/FamilySwitcher\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { \n  Sparkles,\n  Video,\n  ChevronRight,\n  UserCog,\n  Pill,\n  Microscope,\n  GraduationCap,\n  MapPin,\n  Play,\n  MessageCircle\n} from \"lucide-react\";\n\nexport default function PatientHome() {\n  const [, setLocation] = useLocation();\n  \n  // For MVP: Single user, but structured for future multi-user\n  const [activeMemberId, setActiveMemberId] = useState(\"self\");\n  const familyMembers: FamilyMember[] = [\n    { id: \"self\", name: \"John Smith\", relation: \"Self\", initial: \"JS\" },\n    // Future: { id: \"spouse\", name: \"Sarah Smith\", relation: \"Spouse\", initial: \"SS\" },\n    // Future: { id: \"child\", name: \"Emma Smith\", relation: \"Child\", initial: \"ES\" },\n  ];\n\n  // Mock data for ongoing consultation (set to null to hide)\n  const ongoingConsultation = {\n    doctorName: \"Dr. Sarah Wilson\",\n    type: \"Video\",\n    eta: \"5 mins\"\n  };\n\n  const nearbyPharmacies = [\n    { id: \"1\", name: \"HealthPlus Pharmacy\", distance: \"1.2 km\" },\n    { id: \"2\", name: \"Medix Drugstore\", distance: \"2.1 km\" },\n  ];\n\n  const educationalVideos = [\n    { id: \"1\", title: \"Managing Diabetes\", thumbnail: \"\" },\n    { id: \"2\", title: \"Heart Health Tips\", thumbnail: \"\" },\n  ];\n\n  const quickAccessItems = [\n    { id: \"specialists\", label: \"Specialists\", icon: UserCog, href: \"/patient\" },\n    { id: \"pharmacy\", label: \"Pharmacy\", icon: Pill, href: \"/patient\" },\n    { id: \"diagnostics\", label: \"Diagnostics\", icon: Microscope, href: \"/patient/diagnostics\" },\n    { id: \"education\", label: \"Education\", icon: GraduationCap, href: \"/patient\" },\n  ];\n\n  return (\n    <PatientShell notificationCount={3}>\n      <div className=\"container mx-auto px-4 py-6 max-w-2xl space-y-6\">\n        {/* Family Switcher */}\n        <FamilySwitcher\n          members={familyMembers}\n          activeMemberId={activeMemberId}\n          onSwitch={setActiveMemberId}\n        />\n\n        {/* How can we help today? Card */}\n        <Card className=\"p-6\" data-testid=\"card-help-today\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"h-12 w-12 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                <Sparkles className=\"h-6 w-6 text-primary\" />\n              </div>\n              <div className=\"flex-1\">\n                <h2 className=\"text-xl font-semibold text-foreground\">\n                  How can we help today?\n                </h2>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Start with AI or talk to a GP\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"space-y-3\">\n              <Button\n                className=\"w-full\"\n                size=\"lg\"\n                onClick={() => setLocation(\"/patient/intake\")}\n                data-testid=\"button-start-ai-chat\"\n              >\n                <Sparkles className=\"mr-2 h-5 w-5\" />\n                Start AI Chat or Consult a GP\n              </Button>\n              \n              <Button\n                variant=\"ghost\"\n                className=\"w-full\"\n                data-testid=\"button-ask-question\"\n              >\n                <MessageCircle className=\"mr-2 h-4 w-4\" />\n                Ask a Question\n              </Button>\n            </div>\n          </div>\n        </Card>\n\n        {/* Ongoing Consultation Card (conditional) */}\n        {ongoingConsultation && (\n          <Card \n            className=\"p-4 hover-elevate active-elevate-2 cursor-pointer\"\n            onClick={() => setLocation(\"/patient/consult-waiting\")}\n            data-testid=\"card-ongoing-consultation\"\n          >\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"h-10 w-10 rounded-full bg-primary/10 flex items-center justify-center\">\n                  <Video className=\"h-5 w-5 text-primary\" />\n                </div>\n                <div>\n                  <p className=\"font-medium text-foreground\">\n                    Continue with {ongoingConsultation.doctorName}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {ongoingConsultation.type} • ETA {ongoingConsultation.eta}\n                  </p>\n                </div>\n              </div>\n              <ChevronRight className=\"h-5 w-5 text-muted-foreground\" />\n            </div>\n          </Card>\n        )}\n\n        {/* Quick Access Icons Row */}\n        <div className=\"grid grid-cols-4 gap-4\">\n          {quickAccessItems.map((item) => {\n            const Icon = item.icon;\n            return (\n              <button\n                key={item.id}\n                onClick={() => setLocation(item.href)}\n                className=\"flex flex-col items-center gap-2 p-3 rounded-lg hover-elevate active-elevate-2\"\n                data-testid={`quick-access-${item.id}`}\n              >\n                <div className=\"h-12 w-12 rounded-full bg-primary/10 flex items-center justify-center\">\n                  <Icon className=\"h-6 w-6 text-primary\" />\n                </div>\n                <span className=\"text-xs font-medium text-foreground text-center\">\n                  {item.label}\n                </span>\n              </button>\n            );\n          })}\n        </div>\n\n        {/* Nearby Pharmacies Section */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center gap-2\">\n            <MapPin className=\"h-5 w-5 text-primary\" />\n            <h3 className=\"text-lg font-semibold text-foreground\">\n              Nearby pharmacies\n            </h3>\n          </div>\n          \n          <div className=\"space-y-2\">\n            {nearbyPharmacies.map((pharmacy) => (\n              <button\n                key={pharmacy.id}\n                className=\"w-full text-left p-4 rounded-lg hover-elevate active-elevate-2 bg-card\"\n                data-testid={`pharmacy-${pharmacy.id}`}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"font-medium text-foreground\">\n                    {pharmacy.name}\n                  </span>\n                  <span className=\"text-sm text-muted-foreground\">\n                    {pharmacy.distance}\n                  </span>\n                </div>\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Educational Content Section */}\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold text-foreground\">\n            Learn from trusted medical experts\n          </h3>\n          \n          <div className=\"flex gap-4 overflow-x-auto scrollbar-hide pb-2\">\n            {educationalVideos.map((video) => (\n              <button\n                key={video.id}\n                className=\"flex-shrink-0 w-40 hover-elevate active-elevate-2\"\n                data-testid={`video-${video.id}`}\n              >\n                <div className=\"space-y-2\">\n                  <div className=\"aspect-video bg-primary/10 rounded-lg flex items-center justify-center\">\n                    <div className=\"h-12 w-12 rounded-full bg-primary/20 flex items-center justify-center\">\n                      <Play className=\"h-6 w-6 text-primary fill-primary\" />\n                    </div>\n                  </div>\n                  <p className=\"text-sm font-medium text-foreground text-left\">\n                    {video.title}\n                  </p>\n                </div>\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n    </PatientShell>\n  );\n}\n","size_bytes":7876},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/RoleLogin.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card } from \"@/components/ui/card\";\nimport { LogIn, MessageSquare } from \"lucide-react\";\nimport type { UserRole } from \"@shared/schema\";\n\ninterface RoleLoginProps {\n  role: UserRole;\n  onLogin: (email: string, phone: string) => void | Promise<void>;\n}\n\nconst roleConfig: Record<UserRole, { title: string; subtitle: string }> = {\n  patient: {\n    title: \"Patient Login\",\n    subtitle: \"Access your health records and consultations\"\n  },\n  gp: {\n    title: \"GP Portal\",\n    subtitle: \"Manage patient consultations and referrals\"\n  },\n  specialist: {\n    title: \"Specialist Portal\",\n    subtitle: \"Review referrals and manage appointments\"\n  },\n  pharmacy: {\n    title: \"Pharmacy Portal\",\n    subtitle: \"Verify and dispense prescriptions\"\n  },\n  diagnostics: {\n    title: \"Diagnostics Portal\",\n    subtitle: \"Manage lab orders and results\"\n  },\n};\n\nexport function RoleLogin({ role, onLogin }: RoleLoginProps) {\n  const [email, setEmail] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const config = roleConfig[role];\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (email.trim() && phone.trim()) {\n      await onLogin(email.trim(), phone.trim());\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-primary/5 via-background to-accent/5\">\n      <Card className=\"w-full max-w-md p-8 space-y-6\">\n        <div className=\"text-center space-y-2\">\n          <h1 className=\"text-3xl font-bold text-foreground\">{config.title}</h1>\n          <p className=\"text-muted-foreground\">{config.subtitle}</p>\n        </div>\n\n        {role === \"patient\" && (\n          <div className=\"bg-accent/20 border border-accent/40 rounded-lg p-4 space-y-2\">\n            <div className=\"flex items-center gap-2 text-accent-foreground\">\n              <MessageSquare className=\"h-5 w-5\" />\n              <p className=\"font-medium text-sm\">WhatsApp OTP Coming Soon</p>\n            </div>\n            <p className=\"text-xs text-accent-foreground/80\">\n              For now, enter your email and WhatsApp number to access the prototype\n            </p>\n          </div>\n        )}\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <label htmlFor=\"email\" className=\"text-sm font-medium text-foreground\">\n              Email Address\n            </label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"your.email@example.com\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              data-testid={`input-email-${role}`}\n              className=\"w-full\"\n              required\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <label htmlFor=\"phone\" className=\"text-sm font-medium text-foreground\">\n              WhatsApp Number\n            </label>\n            <Input\n              id=\"phone\"\n              type=\"tel\"\n              placeholder=\"+1234567890\"\n              value={phone}\n              onChange={(e) => setPhone(e.target.value)}\n              data-testid={`input-phone-${role}`}\n              className=\"w-full\"\n              required\n            />\n          </div>\n\n          <Button\n            type=\"submit\"\n            className=\"w-full\"\n            size=\"lg\"\n            data-testid={`button-login-${role}`}\n          >\n            <LogIn className=\"mr-2 h-5 w-5\" />\n            Sign In\n          </Button>\n        </form>\n\n        <p className=\"text-xs text-center text-muted-foreground\">\n          This is a functional prototype. No real authentication is performed.\n        </p>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3837},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/pages/pharmacy/Scanner.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  QrCode, \n  LogOut,\n  CheckCircle2,\n  Pill,\n  AlertCircle,\n  Loader2\n} from \"lucide-react\";\nimport { api } from \"@/lib/api\";\n\nexport default function PharmacyScanner() {\n  const [, setLocation] = useLocation();\n  const [qrToken, setQrToken] = useState(\"\");\n  const [verifiedData, setVerifiedData] = useState<any>(null);\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"mediconnect_user\");\n    setLocation(\"/\");\n  };\n\n  const verifyMutation = useMutation({\n    mutationFn: (token: string) => api.pharmacy.verifyQr(token),\n    onSuccess: (data) => {\n      setVerifiedData(data);\n    }\n  });\n\n  const handleVerify = (e: React.FormEvent) => {\n    e.preventDefault();\n    verifyMutation.mutate(qrToken);\n  };\n\n  const handleReset = () => {\n    setQrToken(\"\");\n    setVerifiedData(null);\n    verifyMutation.reset();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <header className=\"border-b border-border bg-card\">\n        <div className=\"container mx-auto px-4 py-4 flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-foreground\">Pharmacy Portal</h1>\n            <p className=\"text-sm text-muted-foreground\">HealthCare Pharmacy</p>\n          </div>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\"\n            onClick={handleLogout}\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"h-4 w-4 mr-2\" />\n            Logout\n          </Button>\n        </div>\n      </header>\n\n      <main className=\"container mx-auto px-4 py-8 max-w-4xl\">\n        {!verifiedData ? (\n          <Card className=\"p-8\">\n            <div className=\"text-center mb-8 space-y-2\">\n              <div className=\"flex justify-center\">\n                <div className=\"h-16 w-16 rounded-full bg-healthcare-prescription/10 flex items-center justify-center\">\n                  <QrCode className=\"h-8 w-8 text-healthcare-prescription\" />\n                </div>\n              </div>\n              <h2 className=\"text-2xl font-bold text-foreground\">Scan Prescription QR</h2>\n              <p className=\"text-muted-foreground\">Enter the QR token to verify and dispense</p>\n            </div>\n\n            <form onSubmit={handleVerify} className=\"space-y-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"qr-token\">QR Token</Label>\n                <Input\n                  id=\"qr-token\"\n                  type=\"text\"\n                  placeholder=\"Paste QR token here\"\n                  value={qrToken}\n                  onChange={(e) => setQrToken(e.target.value)}\n                  data-testid=\"input-qr-token\"\n                  className=\"text-center text-lg font-mono\"\n                  required\n                />\n                <p className=\"text-xs text-muted-foreground text-center\">\n                  Try: QR-ABC123XYZ789 (test token)\n                </p>\n              </div>\n\n              {verifyMutation.error && (\n                <div className=\"bg-destructive/10 border border-destructive/40 rounded-lg p-4 flex items-center gap-3\">\n                  <AlertCircle className=\"h-5 w-5 text-destructive flex-shrink-0\" />\n                  <p className=\"text-sm text-destructive\">{(verifyMutation.error as any).message}</p>\n                </div>\n              )}\n\n              <Button\n                type=\"submit\"\n                size=\"lg\"\n                className=\"w-full\"\n                data-testid=\"button-verify\"\n                disabled={verifyMutation.isPending}\n              >\n                {verifyMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n                    Verifying...\n                  </>\n                ) : (\n                  \"Verify Prescription\"\n                )}\n              </Button>\n            </form>\n          </Card>\n        ) : (\n          <div className=\"space-y-6\">\n            <Card className=\"p-6 bg-accent/20 border-accent\">\n              <div className=\"flex items-center gap-3\">\n                <CheckCircle2 className=\"h-8 w-8 text-accent-foreground\" />\n                <div>\n                  <h2 className=\"text-xl font-semibold text-accent-foreground\">Prescription Verified</h2>\n                  <p className=\"text-sm text-accent-foreground/80\">\n                    Prescription ID: <span className=\"font-mono\">{verifiedData.prescriptionId}</span>\n                  </p>\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h3 className=\"text-xl font-semibold text-foreground\">Items to Dispense</h3>\n                <span className=\"text-xs font-medium text-muted-foreground bg-muted px-2 py-1 rounded\">\n                  NO PATIENT DETAILS\n                </span>\n              </div>\n\n              <div className=\"space-y-4\">\n                {verifiedData.items.map((item: any) => (\n                  <div\n                    key={item.id}\n                    className=\"border border-border rounded-lg p-4\"\n                    data-testid={`pharmacy-item-${item.id}`}\n                  >\n                    <div className=\"flex items-start gap-3\">\n                      <div className=\"h-10 w-10 rounded-lg bg-healthcare-prescription/10 flex items-center justify-center flex-shrink-0\">\n                        <Pill className=\"h-5 w-5 text-healthcare-prescription\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-semibold text-foreground text-lg\">{item.name}</h4>\n                        <div className=\"mt-2 grid grid-cols-2 gap-x-4 gap-y-2 text-sm\">\n                          <div>\n                            <p className=\"text-muted-foreground\">Dosage</p>\n                            <p className=\"font-medium text-foreground\">{item.dosage}</p>\n                          </div>\n                          <div>\n                            <p className=\"text-muted-foreground\">Quantity</p>\n                            <p className=\"font-medium text-foreground\">{item.quantity}</p>\n                          </div>\n                          <div>\n                            <p className=\"text-muted-foreground\">Frequency</p>\n                            <p className=\"font-medium text-foreground\">{item.frequency}</p>\n                          </div>\n                          <div>\n                            <p className=\"text-muted-foreground\">Duration</p>\n                            <p className=\"font-medium text-foreground\">{item.duration}</p>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"mt-6 pt-6 border-t border-border flex gap-3\">\n                <Button\n                  className=\"flex-1\"\n                  size=\"lg\"\n                  data-testid=\"button-dispense\"\n                  onClick={handleReset}\n                >\n                  Mark as Dispensed\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"lg\"\n                  onClick={handleReset}\n                  data-testid=\"button-cancel\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </Card>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n","size_bytes":7813},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/pages/Home.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { User, Stethoscope, Building, ArrowRight } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Home() {\n  const [, setLocation] = useLocation();\n  const [doctorRole, setDoctorRole] = useState<string>(\"\");\n  const [partnerRole, setPartnerRole] = useState<string>(\"\");\n\n  const handleDoctorLogin = () => {\n    if (doctorRole) {\n      setLocation(doctorRole === \"gp\" ? \"/gp/login\" : \"/specialist/login\");\n    }\n  };\n\n  const handlePartnerLogin = () => {\n    if (partnerRole) {\n      setLocation(partnerRole === \"pharmacy\" ? \"/pharmacy/login\" : \"/diagnostics/login\");\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/5 via-background to-accent/5\">\n      <div className=\"container mx-auto px-4 py-16 max-w-6xl\">\n        {/* Hero Section */}\n        <div className=\"text-center mb-12 space-y-4\">\n          <h1 className=\"text-5xl md:text-6xl font-bold text-foreground\">\n            Mediconnect\n          </h1>\n          <p className=\"text-xl md:text-2xl text-muted-foreground max-w-3xl mx-auto\">\n            Healthcare Access Platform - Functional Prototype\n          </p>\n        </div>\n\n        {/* Grouped Login Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-12\">\n          {/* Patient Login - Direct Link */}\n          <Link href=\"/patient/login\">\n            <div>\n              <Card \n                className=\"p-8 hover-elevate active-elevate-2 cursor-pointer transition-all h-full\"\n                data-testid=\"card-patient-login\"\n              >\n                <div className=\"space-y-6\">\n                  <div className=\"h-16 w-16 rounded-lg bg-primary/10 flex items-center justify-center mx-auto\">\n                    <User className=\"h-8 w-8 text-primary\" />\n                  </div>\n                  <div className=\"text-center space-y-3\">\n                    <h3 className=\"text-2xl font-semibold text-foreground\">\n                      Patient Login\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Access your prescriptions and consultations\n                    </p>\n                  </div>\n                  <div className=\"flex justify-center\">\n                    <ArrowRight className=\"h-5 w-5 text-muted-foreground\" data-testid=\"icon-patient-arrow\" />\n                  </div>\n                </div>\n              </Card>\n            </div>\n          </Link>\n\n          {/* Doctor Login - Dropdown */}\n          <Card \n            className=\"p-8 h-full\"\n            data-testid=\"card-doctor-login\"\n          >\n            <div className=\"space-y-6\">\n              <div className=\"h-16 w-16 rounded-lg bg-chart-2/10 flex items-center justify-center mx-auto\">\n                <Stethoscope className=\"h-8 w-8 text-chart-2\" />\n              </div>\n              <div className=\"text-center space-y-3\">\n                <h3 className=\"text-2xl font-semibold text-foreground\">\n                  Doctor Login\n                </h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Manage patient consultations and referrals\n                </p>\n              </div>\n              <div className=\"space-y-3\">\n                <Select value={doctorRole} onValueChange={setDoctorRole}>\n                  <SelectTrigger data-testid=\"select-doctor-role\">\n                    <SelectValue placeholder=\"Select your role\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"gp\" data-testid=\"option-gp\">General Practitioner</SelectItem>\n                    <SelectItem value=\"specialist\" data-testid=\"option-specialist\">Specialist</SelectItem>\n                  </SelectContent>\n                </Select>\n                <Button \n                  className=\"w-full\" \n                  onClick={handleDoctorLogin}\n                  disabled={!doctorRole}\n                  data-testid=\"button-doctor-login\"\n                >\n                  Continue\n                  <ArrowRight className=\"ml-2 h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </Card>\n\n          {/* Partner Login - Dropdown */}\n          <Card \n            className=\"p-8 h-full\"\n            data-testid=\"card-partner-login\"\n          >\n            <div className=\"space-y-6\">\n              <div className=\"h-16 w-16 rounded-lg bg-chart-4/10 flex items-center justify-center mx-auto\">\n                <Building className=\"h-8 w-8 text-chart-4\" />\n              </div>\n              <div className=\"text-center space-y-3\">\n                <h3 className=\"text-2xl font-semibold text-foreground\">\n                  Partner Login\n                </h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Verify prescriptions and manage lab orders\n                </p>\n              </div>\n              <div className=\"space-y-3\">\n                <Select value={partnerRole} onValueChange={setPartnerRole}>\n                  <SelectTrigger data-testid=\"select-partner-role\">\n                    <SelectValue placeholder=\"Select your service\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"pharmacy\" data-testid=\"option-pharmacy\">Pharmacy</SelectItem>\n                    <SelectItem value=\"diagnostics\" data-testid=\"option-diagnostics\">Diagnostics</SelectItem>\n                  </SelectContent>\n                </Select>\n                <Button \n                  className=\"w-full\" \n                  onClick={handlePartnerLogin}\n                  disabled={!partnerRole}\n                  data-testid=\"button-partner-login\"\n                >\n                  Continue\n                  <ArrowRight className=\"ml-2 h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </Card>\n        </div>\n\n        {/* Footer Links */}\n        <div className=\"flex justify-center gap-4 text-sm text-muted-foreground\">\n          <Link href=\"/legal/terms\">\n            <span className=\"hover:text-foreground transition-colors cursor-pointer\" data-testid=\"link-terms\">\n              Terms of Service\n            </span>\n          </Link>\n          <span>•</span>\n          <Link href=\"/legal/privacy\">\n            <span className=\"hover:text-foreground transition-colors cursor-pointer\" data-testid=\"link-privacy\">\n              Privacy Policy\n            </span>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6773},"client/src/pages/pharmacy/Login.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { RoleLogin } from \"@/components/RoleLogin\";\nimport { api } from \"@/lib/api\";\n\nexport default function PharmacyLogin() {\n  const [, setLocation] = useLocation();\n\n  const handleLogin = async (email: string, phone: string) => {\n    const { user } = await api.auth.mockLogin(email, phone, \"pharmacy\");\n    localStorage.setItem(\"mediconnect_user\", JSON.stringify(user));\n    setLocation(\"/pharmacy/scanner\");\n  };\n\n  return <RoleLogin role=\"pharmacy\" onLogin={handleLogin} />;\n}\n","size_bytes":521},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, jsonb, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// User role enum\nexport type UserRole = \"patient\" | \"gp\" | \"specialist\" | \"pharmacy\" | \"diagnostics\";\n\n// Consult status enum\nexport type ConsultStatus = \"intake\" | \"queued\" | \"in_progress\" | \"completed\";\n\n// Prescription status enum  \nexport type PrescriptionStatus = \"active\" | \"dispensed\" | \"expired\";\n\n// Diagnostics order status enum\nexport type DiagnosticsStatus = \"ordered\" | \"sample_collected\" | \"in_progress\" | \"completed\";\n\n// Referral status enum\nexport type ReferralStatus = \"proposed\" | \"accepted\" | \"completed\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  phone: text(\"phone\"),\n  email: text(\"email\").unique(),\n  role: text(\"role\").notNull().$type<UserRole>(),\n  metadata: jsonb(\"metadata\"),\n});\n\n// Consults table\nexport const consults = pgTable(\"consults\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").notNull().references(() => users.id),\n  gpId: varchar(\"gp_id\").references(() => users.id),\n  status: text(\"status\").notNull().$type<ConsultStatus>(),\n  intakeSummary: text(\"intake_summary\"),\n  intakeData: jsonb(\"intake_data\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Messages table\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  consultId: varchar(\"consult_id\").notNull().references(() => consults.id),\n  senderId: varchar(\"sender_id\").notNull().references(() => users.id),\n  content: text(\"content\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Prescriptions table\nexport const prescriptions = pgTable(\"prescriptions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").notNull().references(() => users.id),\n  consultId: varchar(\"consult_id\").references(() => consults.id),\n  status: text(\"status\").notNull().$type<PrescriptionStatus>(),\n  items: jsonb(\"items\").notNull(),\n  qrToken: text(\"qr_token\"),\n  qrDisabled: integer(\"qr_disabled\").default(0),\n  pdfDownloaded: integer(\"pdf_downloaded\").default(0),\n  fileUrl: text(\"file_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Referrals table\nexport const referrals = pgTable(\"referrals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").notNull().references(() => users.id),\n  gpId: varchar(\"gp_id\").notNull().references(() => users.id),\n  specialistId: varchar(\"specialist_id\").references(() => users.id),\n  status: text(\"status\").notNull().$type<ReferralStatus>(),\n  reason: text(\"reason\").notNull(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Diagnostics orders table\nexport const diagnosticsOrders = pgTable(\"diagnostics_orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").notNull().references(() => users.id),\n  specialistId: varchar(\"specialist_id\").notNull().references(() => users.id),\n  labId: varchar(\"lab_id\").references(() => users.id),\n  status: text(\"status\").notNull().$type<DiagnosticsStatus>(),\n  testType: text(\"test_type\").notNull(),\n  resultUrl: text(\"result_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Zod schemas for validation\nexport const insertUserSchema = createInsertSchema(users).omit({ id: true }).extend({\n  role: z.enum([\"patient\", \"gp\", \"specialist\", \"pharmacy\", \"diagnostics\"])\n});\nexport const insertConsultSchema = createInsertSchema(consults).omit({ id: true, createdAt: true, updatedAt: true }).extend({\n  status: z.enum([\"intake\", \"queued\", \"in_progress\", \"completed\"])\n});\nexport const insertMessageSchema = createInsertSchema(messages).omit({ id: true, createdAt: true });\nexport const insertPrescriptionSchema = createInsertSchema(prescriptions).omit({ id: true, createdAt: true }).extend({\n  status: z.enum([\"active\", \"dispensed\", \"expired\"])\n});\nexport const insertReferralSchema = createInsertSchema(referrals).omit({ id: true, createdAt: true }).extend({\n  status: z.enum([\"proposed\", \"accepted\", \"completed\"])\n});\nexport const insertDiagnosticsOrderSchema = createInsertSchema(diagnosticsOrders).omit({ id: true, createdAt: true, updatedAt: true }).extend({\n  status: z.enum([\"ordered\", \"sample_collected\", \"in_progress\", \"completed\"])\n});\n\n// Type exports\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Consult = typeof consults.$inferSelect;\nexport type InsertConsult = z.infer<typeof insertConsultSchema>;\n\nexport type Message = typeof messages.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\n\nexport type Prescription = typeof prescriptions.$inferSelect;\nexport type InsertPrescription = z.infer<typeof insertPrescriptionSchema>;\n\nexport type Referral = typeof referrals.$inferSelect;\nexport type InsertReferral = z.infer<typeof insertReferralSchema>;\n\nexport type DiagnosticsOrder = typeof diagnosticsOrders.$inferSelect;\nexport type InsertDiagnosticsOrder = z.infer<typeof insertDiagnosticsOrderSchema>;\n\n// Prescription item type\nexport type PrescriptionItem = {\n  id: string;\n  name: string;\n  dosage: string;\n  quantity: string;\n  frequency: string;\n  duration: string;\n  instructions?: string;\n};\n\n// Pharmacy view (item-only, no PII)\nexport type PharmacyView = {\n  items: PrescriptionItem[];\n  prescriptionId: string;\n  meta: {\n    noPII: true;\n  };\n};\n\n// Intake form data\nexport type IntakeFormData = {\n  symptoms: string;\n  duration: string;\n  severity: string;\n  medications?: string;\n  allergies?: string;\n};\n\n// Drizzle relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  consultAsPatient: many(consults, { relationName: \"patientConsults\" }),\n  consultAsGp: many(consults, { relationName: \"gpConsults\" }),\n  prescriptions: many(prescriptions),\n  referralsAsPatient: many(referrals, { relationName: \"patientReferrals\" }),\n  referralsAsGp: many(referrals, { relationName: \"gpReferrals\" }),\n  diagnosticsOrders: many(diagnosticsOrders),\n}));\n\nexport const consultsRelations = relations(consults, ({ one, many }) => ({\n  patient: one(users, {\n    fields: [consults.patientId],\n    references: [users.id],\n    relationName: \"patientConsults\",\n  }),\n  gp: one(users, {\n    fields: [consults.gpId],\n    references: [users.id],\n    relationName: \"gpConsults\",\n  }),\n  messages: many(messages),\n  prescriptions: many(prescriptions),\n}));\n\nexport const messagesRelations = relations(messages, ({ one }) => ({\n  consult: one(consults, {\n    fields: [messages.consultId],\n    references: [consults.id],\n  }),\n  sender: one(users, {\n    fields: [messages.senderId],\n    references: [users.id],\n  }),\n}));\n\nexport const prescriptionsRelations = relations(prescriptions, ({ one }) => ({\n  patient: one(users, {\n    fields: [prescriptions.patientId],\n    references: [users.id],\n  }),\n  consult: one(consults, {\n    fields: [prescriptions.consultId],\n    references: [consults.id],\n  }),\n}));\n\nexport const referralsRelations = relations(referrals, ({ one }) => ({\n  patient: one(users, {\n    fields: [referrals.patientId],\n    references: [users.id],\n    relationName: \"patientReferrals\",\n  }),\n  gp: one(users, {\n    fields: [referrals.gpId],\n    references: [users.id],\n    relationName: \"gpReferrals\",\n  }),\n  specialist: one(users, {\n    fields: [referrals.specialistId],\n    references: [users.id],\n  }),\n}));\n\nexport const diagnosticsOrdersRelations = relations(diagnosticsOrders, ({ one }) => ({\n  patient: one(users, {\n    fields: [diagnosticsOrders.patientId],\n    references: [users.id],\n  }),\n  specialist: one(users, {\n    fields: [diagnosticsOrders.specialistId],\n    references: [users.id],\n  }),\n  lab: one(users, {\n    fields: [diagnosticsOrders.labId],\n    references: [users.id],\n  }),\n}));\n","size_bytes":8193},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\n\nimport Home from \"@/pages/Home\";\n\nimport PatientLogin from \"@/pages/patient/Login\";\nimport PatientHome from \"@/pages/patient/PatientHome\";\nimport Intake from \"@/pages/patient/Intake\";\nimport ConsultWaiting from \"@/pages/patient/ConsultWaiting\";\nimport Prescriptions from \"@/pages/patient/Prescriptions\";\nimport PrescriptionDetail from \"@/pages/patient/PrescriptionDetail\";\nimport Diagnostics from \"@/pages/patient/Diagnostics\";\nimport Profile from \"@/pages/patient/Profile\";\n\nimport GPLogin from \"@/pages/gp/Login\";\nimport GPPortal from \"@/pages/gp/GPPortal\";\n\nimport SpecialistLogin from \"@/pages/specialist/Login\";\nimport SpecialistPortal from \"@/pages/specialist/SpecialistPortal\";\n\nimport PharmacyLogin from \"@/pages/pharmacy/Login\";\nimport PharmacyScanner from \"@/pages/pharmacy/Scanner\";\n\nimport DiagnosticsLogin from \"@/pages/diagnostics/Login\";\nimport DiagnosticsOrders from \"@/pages/diagnostics/Orders\";\n\nimport Terms from \"@/pages/legal/Terms\";\nimport Privacy from \"@/pages/legal/Privacy\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      \n      {/* Patient Routes */}\n      <Route path=\"/patient/login\" component={PatientLogin} />\n      <Route path=\"/patient/home\" component={PatientHome} />\n      <Route path=\"/patient/intake\" component={Intake} />\n      <Route path=\"/patient/consult-waiting\" component={ConsultWaiting} />\n      <Route path=\"/patient/prescriptions\" component={Prescriptions} />\n      <Route path=\"/patient/prescriptions/:id\" component={PrescriptionDetail} />\n      <Route path=\"/patient/diagnostics\" component={Diagnostics} />\n      <Route path=\"/patient/profile\" component={Profile} />\n      \n      {/* GP Routes */}\n      <Route path=\"/gp/login\" component={GPLogin} />\n      <Route path=\"/gp\" component={GPPortal} />\n      \n      {/* Specialist Routes */}\n      <Route path=\"/specialist/login\" component={SpecialistLogin} />\n      <Route path=\"/specialist\" component={SpecialistPortal} />\n      \n      {/* Pharmacy Routes */}\n      <Route path=\"/pharmacy/login\" component={PharmacyLogin} />\n      <Route path=\"/pharmacy/scanner\" component={PharmacyScanner} />\n      \n      {/* Diagnostics Routes */}\n      <Route path=\"/diagnostics/login\" component={DiagnosticsLogin} />\n      <Route path=\"/diagnostics/orders\" component={DiagnosticsOrders} />\n      \n      {/* Legal Routes */}\n      <Route path=\"/legal/terms\" component={Terms} />\n      <Route path=\"/legal/privacy\" component={Privacy} />\n      \n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3083},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"design_guidelines.md":{"content":"# Mediconnect Design Guidelines\n\n## Design Approach: Modern Healthcare Design System\n\n**Selected Approach**: Material Design 3 foundation with healthcare-specific adaptations and modern color palette\n**Rationale**: Healthcare applications demand trust, clarity, and accessibility. The updated design uses purple/indigo as the primary color for a modern, accessible interface while maintaining visual polish for patient-facing experiences.\n\n## Core Design Principles\n\n1. **Clinical Clarity**: Information hierarchy optimized for quick scanning and decision-making\n2. **Trust & Professionalism**: Clean, medical-grade aesthetics that inspire confidence\n3. **Role-Adaptive UI**: Distinct visual treatments for patient vs. professional portals\n4. **Accessibility First**: WCAG AAA compliance for healthcare contexts\n\n## Color Palette\n\n### Light Mode\n- **Primary (Purple/Indigo)**: 245 80% 60% (#5B51E8) - main actions, active states, primary buttons\n- **Emergency/Danger (Red)**: 0 72% 51% (#DC2626) - emergency button, sign out, critical alerts\n- **Success (Green)**: 160 84% 39% (#10B981) - \"Ready\", \"Completed\", \"Paid\" status badges\n- **Warning (Amber)**: 38 92% 50% (#F59E0B) - \"Pending\" status, caution states\n- **Info (Light Blue)**: 200 95% 45% - informational badges and notifications\n- **Background Primary**: 0 0% 100% (White) - main background\n- **Background Secondary**: 220 14% 98% (#F9FAFB) - section backgrounds, subtle contrast\n- **Card**: 0 0% 100% (White) - card backgrounds with subtle shadow\n- **Border**: 220 13% 91% (#E5E7EB) - default borders, dividers\n- **Text Primary**: 220 13% 18% - main content text\n- **Text Secondary**: 220 9% 46% - supporting text, metadata\n- **Text Tertiary**: 220 9% 64% - least important text, placeholders\n\n### Dark Mode\n- **Primary (Purple/Indigo)**: 245 75% 65% - lighter for better contrast on dark backgrounds\n- **Emergency/Danger (Red)**: 0 68% 55% - adjusted for dark mode visibility\n- **Success (Green)**: 160 80% 45% - adjusted for dark mode\n- **Warning (Amber)**: 38 88% 55% - adjusted for dark mode\n- **Info (Light Blue)**: 200 90% 50%\n- **Background Primary**: 220 18% 12% - deep dark with slight blue tint\n- **Background Secondary**: 220 15% 16% - slightly elevated dark surface\n- **Card**: 220 15% 18% - elevated card surface\n- **Border**: 220 12% 24% - borders in dark mode\n- **Text Primary**: 220 5% 95% - light text\n- **Text Secondary**: 220 5% 70% - muted light text\n- **Text Tertiary**: 220 5% 50% - very muted text\n\n### Status Colors (Semantic)\n- **Ready/Active**: Green (160 84% 39%) - available, ready states\n- **Pending**: Amber (38 92% 50%) - waiting, in-progress states\n- **Completed**: Green (160 84% 39%) with checkmark icon\n- **Expired/Cancelled**: Red (0 72% 51%) or Gray (220 9% 46%)\n- **Paid**: Green (160 84% 39%) - successful payment\n- **Prescription**: Purple (260 60% 55%) - pharmacy-related\n- **Diagnostics**: Cyan (190 70% 50%) - lab work, tests\n- **Consult Active**: Orange (25 90% 55%) - urgent attention needed\n\n## Typography\n\n### Font Families\n- **Primary (UI/Body)**: Inter (Google Fonts - exceptional readability, medical contexts)\n- **Headings**: Inter (same family, weight variation for hierarchy)\n- **Monospace (Data/IDs)**: JetBrains Mono (patient IDs, reference numbers)\n\n### Type Scale & Weights\n- **Display (Hero)**: text-5xl md:text-6xl, font-bold (700)\n- **H1 (Page Titles)**: text-3xl md:text-4xl, font-semibold (600)\n- **H2 (Section Headers)**: text-2xl md:text-3xl, font-semibold (600)\n- **H3 (Card Titles)**: text-xl font-semibold (600)\n- **Body Large**: text-base md:text-lg, font-normal (400)\n- **Body**: text-sm md:text-base, font-normal (400)\n- **Small/Metadata**: text-sm (14px), font-normal (400), text-secondary color\n- **Caption**: text-xs, font-normal (400)\n- **Label (Form/Buttons)**: text-sm font-medium (500)\n\n## Spacing System\n\n### Core Units\n- **Container padding**: 16px (mobile - p-4), 24px (desktop - p-6)\n- **Card padding**: 16px (p-4)\n- **Section gaps**: 24px (gap-6)\n- **Element gaps**: 12px (gap-3), 8px tight (gap-2)\n- **Micro spacing**: 4px (gap-1) for very tight elements\n\n### Spacing Scale\n- **xs**: 4px (space-1)\n- **sm**: 8px (space-2)\n- **md**: 12px (space-3)\n- **lg**: 16px (space-4)\n- **xl**: 24px (space-6)\n- **2xl**: 32px (space-8)\n\n## Layout System\n\n### Grid & Containers\n- **Max Width**: max-w-7xl (1280px) for main content\n- **Portal Layouts**: max-w-6xl (professional interfaces)\n- **Reading Content**: max-w-3xl (patient instructions, legal text)\n- **Grid Patterns**: grid-cols-1 md:grid-cols-2 lg:grid-cols-3\n\n### Layout Structure\n- **Top Bar**: Fixed height ~56px (h-14), logo left, emergency + notification right\n- **Bottom Tab Bar**: Fixed height ~64px (h-16), 5 evenly spaced tabs\n- **Content Area**: Scrollable between top and bottom bars, overflow-y-auto\n\n### Responsive Breakpoints\n- **Mobile**: base (< 768px) - single column, bottom nav\n- **Tablet**: md (768px+) - 2-column layouts, side nav optional\n- **Desktop**: lg (1024px+) - full multi-column, persistent side navigation\n\n## Component Patterns\n\n### Status Badges\n- **Shape**: Rounded pill (rounded-full)\n- **Padding**: px-3 py-1\n- **Typography**: text-xs font-medium\n- **Variants**:\n  - **Ready/Active**: Green background (bg-green-100), green text (text-green-700)\n  - **Pending**: Amber background (bg-amber-100), amber text (text-amber-700)\n  - **Completed**: Green background with checkmark icon\n  - **Expired/Cancelled**: Red/gray background\n  - **Paid**: Green background (bg-green-100), green text (text-green-700)\n\n### Cards\n- **Background**: White (bg-card)\n- **Border Radius**: 12px (rounded-xl)\n- **Padding**: 16px (p-4)\n- **Shadow**: Subtle (shadow-sm)\n- **Clickable Cards**: \n  - Hover state with slight elevation (hover:shadow-md)\n  - Transition (transition-shadow duration-200)\n- **Action Cards**:\n  - Include icon (left)\n  - Title (font-semibold)\n  - Description (text-sm text-secondary)\n  - Arrow/chevron (right)\n\n### Progress Dots\n- **Layout**: Horizontal flex (flex gap-2)\n- **Dots**: Circular (w-2 h-2 rounded-full)\n- **Completed**: Filled with primary color (bg-primary)\n- **Pending**: Outlined (border-2 border-primary bg-transparent)\n\n### Navigation\n\n#### Bottom Navigation (Mobile)\n- **Items**: 5 evenly spaced tabs\n- **Layout**: Fixed bottom, flex justify-around\n- **Active State**: Purple icon + text (text-primary)\n- **Inactive State**: Gray icon + text (text-muted-foreground)\n- **Icon + Label**: Vertical stack, icon above label\n- **Height**: 64px (h-16)\n\n#### Top Bar\n- **Height**: 56px (h-14)\n- **Layout**: Flex justify-between\n- **Left**: Logo/brand\n- **Right**: Emergency button + notifications\n\n#### Partner Portals\n- **Side Navigation**: Desktop persistent, mobile collapsible\n- **Tab Navigation**: Underline active state, primary color accent\n\n### Buttons\n\n#### Primary Button\n- **Background**: Purple (bg-primary)\n- **Text**: White (text-primary-foreground)\n- **Width**: Full width on mobile (w-full md:w-auto)\n- **Padding**: px-6 py-3\n- **Border Radius**: rounded-md\n- **Font**: font-medium\n\n#### Secondary Button\n- **Background**: White/transparent (bg-transparent)\n- **Border**: 2px border-primary\n- **Text**: Purple (text-primary)\n- **Padding**: px-6 py-3\n\n#### Emergency Button\n- **Background**: Red (bg-destructive)\n- **Text**: White (text-destructive-foreground)\n- **Icon**: Alert or phone icon\n- **Position**: Top-right in header\n\n### Forms & Inputs\n- **Text Fields**: Outlined style, focus:ring-2 ring-primary, rounded-md, p-3\n- **Labels**: text-sm font-medium, mb-1\n- **Helper Text**: text-xs text-muted-foreground\n- **Error State**: border-destructive, text-destructive\n\n### Data Display\n- **Tables**: Striped rows, sticky header, min 3 columns visible on mobile\n- **Timeline**: Vertical line (border-l-2) with circular nodes\n- **Item Lists**: Large touch targets (min-h-16), primary text bold, secondary text-sm\n\n### Overlays & Modals\n- **Modal**: Centered, max-w-md, shadow-2xl, rounded-xl\n- **QR Scanner**: Full-screen overlay, camera viewport centered\n- **Confirmation Dialogs**: Critical actions use destructive color\n\n## Role-Specific UI\n\n### Patient Portal\n- Friendly, approachable with rounded elements (rounded-xl)\n- Large touch targets (min-h-14 buttons)\n- Bottom tab navigation (5 items)\n- Purple accent for active states\n- Prescription items with medication icons\n\n### GP/Specialist Portals\n- Clinical efficiency focus\n- Dense information display\n- Quick action buttons\n- Patient cards with medical summary\n\n### Pharmacy Portal\n- QR scanner prominent\n- Item-only display (NO patient names/details)\n- Large verification feedback\n- Quantity and dosage emphasized\n\n### Diagnostics Portal\n- Minimal PII tables\n- Upload zone with drag-drop\n- Result preview cards\n\n## Accessibility Features\n\n- **Focus Indicators**: ring-2 ring-offset-2 ring-primary\n- **Color Contrast**: Minimum 7:1 for clinical data (WCAG AAA)\n- **Touch Targets**: Minimum 44x44px (11rem) for mobile\n- **Screen Reader**: aria-labels on all icons\n- **Keyboard Navigation**: Full tab order, Enter/Space activation\n\n## Animations & Interactions\n\n**Minimal Motion Philosophy**: Healthcare contexts require stability\n\n- **Page Transitions**: Simple fade (duration-200)\n- **Status Changes**: Color transition (transition-colors duration-300)\n- **Hover States**: Slight elevation (hover:shadow-md)\n- **Loading States**: Subtle pulse on skeleton screens\n- **NO**: Complex animations, parallax, particle effects\n","size_bytes":9432},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/StaticChatThread.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport type { Message } from \"@shared/schema\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface StaticChatThreadProps {\n  messages: Message[];\n  currentUserId?: string;\n  className?: string;\n}\n\nexport function StaticChatThread({ messages, currentUserId, className }: StaticChatThreadProps) {\n  return (\n    <div className={cn(\"space-y-4 p-4\", className)} data-testid=\"chat-thread\">\n      {messages.length === 0 ? (\n        <div className=\"text-center py-12 text-muted-foreground\">\n          <p>No messages yet</p>\n        </div>\n      ) : (\n        messages.map((message) => {\n          const isOwn = message.senderId === currentUserId;\n          \n          return (\n            <div\n              key={message.id}\n              data-testid={`message-${message.id}`}\n              className={cn(\n                \"flex\",\n                isOwn ? \"justify-end\" : \"justify-start\"\n              )}\n            >\n              <div\n                className={cn(\n                  \"max-w-[70%] rounded-lg px-4 py-2 space-y-1\",\n                  isOwn\n                    ? \"bg-primary text-primary-foreground\"\n                    : \"bg-muted text-foreground\"\n                )}\n              >\n                <p className=\"text-sm\">{message.content}</p>\n                {message.createdAt && (\n                  <p className={cn(\n                    \"text-xs\",\n                    isOwn ? \"text-primary-foreground/70\" : \"text-muted-foreground\"\n                  )}>\n                    {formatDistanceToNow(new Date(message.createdAt), { addSuffix: true })}\n                  </p>\n                )}\n              </div>\n            </div>\n          );\n        })\n      )}\n    </div>\n  );\n}\n","size_bytes":1730},"client/src/pages/gp/GPPortal.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { TabNav, type Tab } from \"@/components/TabNav\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { StatusChip } from \"@/components/StatusChip\";\nimport { StaticChatThread } from \"@/components/StaticChatThread\";\nimport { \n  Inbox, \n  CheckCircle2, \n  MessageSquare, \n  History, \n  User,\n  LogOut,\n  Clock,\n  Loader2\n} from \"lucide-react\";\nimport { api } from \"@/lib/api\";\nimport { getUserFromStorage } from \"@/lib/storage\";\n\nconst tabs: Tab[] = [\n  { id: \"live\", label: \"Live Requests\", href: \"/gp\", icon: <Inbox className=\"h-5 w-5\" /> },\n  { id: \"completed\", label: \"Completed\", href: \"/gp\", icon: <CheckCircle2 className=\"h-5 w-5\" /> },\n  { id: \"chats\", label: \"Chats\", href: \"/gp\", icon: <MessageSquare className=\"h-5 w-5\" /> },\n  { id: \"history\", label: \"History\", href: \"/gp\", icon: <History className=\"h-5 w-5\" /> },\n  { id: \"profile\", label: \"Profile\", href: \"/gp\", icon: <User className=\"h-5 w-5\" /> },\n];\n\nconst mockMessages = [\n  {\n    id: \"msg-1\",\n    consultId: \"C-001\",\n    senderId: \"patient-1\",\n    content: \"Hi doctor, I've been experiencing severe headaches\",\n    createdAt: new Date(Date.now() - 3600000).toISOString()\n  },\n  {\n    id: \"msg-2\",\n    consultId: \"C-001\",\n    senderId: \"gp-1\",\n    content: \"I understand. Can you describe when the headaches occur?\",\n    createdAt: new Date(Date.now() - 3000000).toISOString()\n  }\n];\n\nexport default function GPPortal() {\n  const [, setLocation] = useLocation();\n\n  const userData = getUserFromStorage() || {};\n  const userId = userData.id;\n  const role = userData.role;\n\n  const { data: consults = [], isLoading, error } = useQuery({\n    queryKey: [\"/api/consults\", role, userId],\n    queryFn: () => api.consults.listConsults(role, userId),\n    enabled: !!userId && !!role\n  });\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"mediconnect_user\");\n    setLocation(\"/\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <header className=\"border-b border-border bg-card\">\n        <div className=\"container mx-auto px-4 py-4 flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-foreground\">GP Portal</h1>\n            <p className=\"text-sm text-muted-foreground\">Dr. Sarah Johnson</p>\n          </div>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\"\n            onClick={handleLogout}\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"h-4 w-4 mr-2\" />\n            Logout\n          </Button>\n        </div>\n      </header>\n\n      <TabNav tabs={tabs} />\n\n      <main className=\"container mx-auto px-4 py-8 max-w-7xl\">\n        {isLoading ? (\n          <div className=\"flex items-center justify-center py-12\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n          </div>\n        ) : error ? (\n          <Card className=\"p-12 text-center\">\n            <p className=\"text-destructive\">Error loading consults: {error.message}</p>\n          </Card>\n        ) : (\n          <div className=\"grid lg:grid-cols-3 gap-6\">\n            <div className=\"lg:col-span-2 space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h2 className=\"text-xl font-semibold text-foreground\">Live Consultation Requests</h2>\n                <span className=\"text-sm text-muted-foreground\">{consults.length} pending</span>\n              </div>\n\n              {consults.map((consult) => (\n              <Card key={consult.id} className=\"p-6 hover-elevate\" data-testid={`consult-${consult.id}`}>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-start justify-between gap-4\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-3 mb-2\">\n                        <h3 className=\"font-semibold text-foreground\">Patient Consult</h3>\n                        <StatusChip status={consult.status} />\n                      </div>\n                      <p className=\"text-sm text-muted-foreground mb-1\">\n                        Consult ID: <span className=\"font-mono\">{consult.id}</span>\n                      </p>\n                      <p className=\"text-sm text-foreground\">{consult.intakeSummary}</p>\n                    </div>\n                    <div className=\"text-right text-sm\">\n                      <div className=\"flex items-center gap-1 text-muted-foreground\">\n                        <Clock className=\"h-3 w-3\" />\n                        {new Date(consult.createdAt).toLocaleTimeString()}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex gap-2\">\n                    <Button size=\"sm\" data-testid={`button-accept-${consult.id}`}>\n                      Accept Consult\n                    </Button>\n                    <Button size=\"sm\" variant=\"outline\" data-testid={`button-view-${consult.id}`}>\n                      View Details\n                    </Button>\n                  </div>\n                </div>\n              </Card>\n              ))}\n            </div>\n\n            <div>\n              <Card className=\"p-6\">\n                <h3 className=\"font-semibold text-foreground mb-4\">Recent Chats (Read-Only)</h3>\n                <StaticChatThread messages={mockMessages} currentUserId=\"gp-1\" />\n              </Card>\n            </div>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n","size_bytes":5557},"client/src/components/StatusChip.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport type { ConsultStatus, PrescriptionStatus, DiagnosticsStatus, ReferralStatus } from \"@shared/schema\";\n\ntype Status = ConsultStatus | PrescriptionStatus | DiagnosticsStatus | ReferralStatus | string;\n\ninterface StatusChipProps {\n  status: Status;\n  className?: string;\n}\n\nconst statusConfig: Record<string, { label: string; className: string }> = {\n  // Consult statuses\n  intake: { label: \"Intake\", className: \"bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300\" },\n  queued: { label: \"Queued\", className: \"bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-300\" },\n  in_progress: { label: \"In Progress\", className: \"bg-healthcare-consult/20 text-healthcare-consult dark:bg-healthcare-consult/30\" },\n  completed: { label: \"Completed\", className: \"bg-healthcare-completed/20 text-healthcare-completed dark:bg-healthcare-completed/30\" },\n  \n  // Prescription statuses\n  active: { label: \"Active\", className: \"bg-healthcare-prescription/20 text-healthcare-prescription dark:bg-healthcare-prescription/30\" },\n  dispensed: { label: \"Dispensed\", className: \"bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300\" },\n  expired: { label: \"Expired\", className: \"bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-300\" },\n  \n  // Diagnostics statuses\n  ordered: { label: \"Ordered\", className: \"bg-healthcare-diagnostics/20 text-healthcare-diagnostics dark:bg-healthcare-diagnostics/30\" },\n  sample_collected: { label: \"Sample Collected\", className: \"bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300\" },\n  \n  // Referral statuses\n  proposed: { label: \"Proposed\", className: \"bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-300\" },\n  accepted: { label: \"Accepted\", className: \"bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300\" },\n  \n  // Generic\n  awaiting: { label: \"Awaiting\", className: \"bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-300\" },\n  ready: { label: \"Ready\", className: \"bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300\" },\n  collected: { label: \"Collected\", className: \"bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-300\" },\n};\n\nexport function StatusChip({ status, className }: StatusChipProps) {\n  const config = statusConfig[status] || {\n    label: status.replace(/_/g, ' ').replace(/\\b\\w/g, (l) => l.toUpperCase()),\n    className: \"bg-muted text-muted-foreground\"\n  };\n\n  return (\n    <span\n      data-testid={`status-${status}`}\n      className={cn(\n        \"inline-flex items-center rounded-full px-3 py-1 text-xs font-medium\",\n        config.className,\n        className\n      )}\n    >\n      {config.label}\n    </span>\n  );\n}\n","size_bytes":2738},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/pages/patient/Intake.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ArrowLeft, Send, Loader2 } from \"lucide-react\";\nimport { api } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { getUserFromStorage } from \"@/lib/storage\";\n\nexport default function Intake() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    symptoms: \"\",\n    duration: \"\",\n    severity: \"\",\n    medications: \"\",\n    allergies: \"\"\n  });\n\n  const userData = getUserFromStorage() || {};\n  const patientId = userData.id;\n\n  const submitIntakeMutation = useMutation({\n    mutationFn: async () => {\n      const consult = await api.consults.startIntake(patientId, formData);\n      await api.consults.queueConsult(consult.id);\n      return consult;\n    },\n    onSuccess: () => {\n      setLocation(\"/patient/consult-waiting\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Submission Failed\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    submitIntakeMutation.mutate();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <header className=\"border-b border-border bg-card\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setLocation(\"/patient/home\")}\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back\n          </Button>\n        </div>\n      </header>\n\n      <main className=\"container mx-auto px-4 py-8 max-w-3xl\">\n        <div className=\"mb-8 text-center space-y-2\">\n          <h1 className=\"text-3xl font-bold text-foreground\">Health Intake</h1>\n          <p className=\"text-muted-foreground\">\n            Tell us about your symptoms so we can connect you with the right healthcare provider\n          </p>\n        </div>\n\n        <Card className=\"p-6 md:p-8\">\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"symptoms\">What symptoms are you experiencing?</Label>\n              <Textarea\n                id=\"symptoms\"\n                placeholder=\"Describe your symptoms in detail...\"\n                value={formData.symptoms}\n                onChange={(e) => setFormData({ ...formData, symptoms: e.target.value })}\n                data-testid=\"input-symptoms\"\n                className=\"min-h-32\"\n                required\n              />\n            </div>\n\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"duration\">How long have you had these symptoms?</Label>\n                <Input\n                  id=\"duration\"\n                  placeholder=\"e.g., 3 days, 2 weeks\"\n                  value={formData.duration}\n                  onChange={(e) => setFormData({ ...formData, duration: e.target.value })}\n                  data-testid=\"input-duration\"\n                  required\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"severity\">Severity level</Label>\n                <Select\n                  value={formData.severity}\n                  onValueChange={(value) => setFormData({ ...formData, severity: value })}\n                  required\n                >\n                  <SelectTrigger id=\"severity\" data-testid=\"select-severity\">\n                    <SelectValue placeholder=\"Select severity\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"mild\">Mild</SelectItem>\n                    <SelectItem value=\"moderate\">Moderate</SelectItem>\n                    <SelectItem value=\"severe\">Severe</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"medications\">Current medications (optional)</Label>\n              <Input\n                id=\"medications\"\n                placeholder=\"List any medications you're taking\"\n                value={formData.medications}\n                onChange={(e) => setFormData({ ...formData, medications: e.target.value })}\n                data-testid=\"input-medications\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"allergies\">Known allergies (optional)</Label>\n              <Input\n                id=\"allergies\"\n                placeholder=\"List any known allergies\"\n                value={formData.allergies}\n                onChange={(e) => setFormData({ ...formData, allergies: e.target.value })}\n                data-testid=\"input-allergies\"\n              />\n            </div>\n\n            <Button\n              type=\"submit\"\n              size=\"lg\"\n              className=\"w-full\"\n              data-testid=\"button-submit-intake\"\n              disabled={submitIntakeMutation.isPending}\n            >\n              {submitIntakeMutation.isPending ? (\n                <>\n                  <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n                  Submitting...\n                </>\n              ) : (\n                <>\n                  <Send className=\"mr-2 h-5 w-5\" />\n                  Submit & Connect with GP\n                </>\n              )}\n            </Button>\n          </form>\n        </Card>\n      </main>\n    </div>\n  );\n}\n","size_bytes":5990},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/pages/patient/Profile.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { PatientShell } from \"@/components/PatientShell\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  User, \n  Users, \n  CreditCard, \n  MapPin, \n  FileText, \n  Bell, \n  HelpCircle, \n  Scale,\n  LogOut,\n  ChevronRight,\n  Headphones,\n  AlertTriangle,\n  Edit\n} from \"lucide-react\";\n\nexport default function Profile() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"mediconnect_user\");\n    setLocation(\"/\");\n  };\n\n  const handleComingSoon = (feature: string) => {\n    toast({\n      title: \"Coming soon\",\n      description: `${feature} will be available in a future update.`,\n    });\n  };\n\n  const menuItems = [\n    {\n      icon: Users,\n      title: \"Dependents and family\",\n      subtitle: \"2 dependents\",\n      route: \"/patient/profile/dependents\",\n      testId: \"menu-dependents\"\n    },\n    {\n      icon: CreditCard,\n      title: \"Payments\",\n      subtitle: \"Payment methods and invoices\",\n      route: \"/patient/profile/payments\",\n      testId: \"menu-payments\"\n    },\n    {\n      icon: MapPin,\n      title: \"Addresses\",\n      subtitle: \"Delivery and consultation addresses\",\n      route: \"/patient/profile/addresses\",\n      testId: \"menu-addresses\"\n    },\n    {\n      icon: FileText,\n      title: \"Records and documents\",\n      subtitle: \"Medical history and reports\",\n      route: \"/patient/profile/records\",\n      testId: \"menu-records\"\n    }\n  ];\n\n  const legalItems = [\n    {\n      title: \"Terms of service\",\n      route: \"/legal/terms\",\n      testId: \"link-terms\"\n    },\n    {\n      title: \"Privacy policy\",\n      route: \"/legal/privacy\",\n      testId: \"link-privacy\"\n    }\n  ];\n\n  return (\n    <PatientShell>\n      <div className=\"container mx-auto px-4 py-6 max-w-2xl space-y-4\">\n        {/* User Info Card */}\n        <Card data-testid=\"card-user-info\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-start gap-4 mb-6\">\n              <Avatar className=\"h-14 w-14 bg-primary\" data-testid=\"avatar-user\">\n                <AvatarFallback className=\"bg-primary text-primary-foreground\">\n                  <User className=\"h-7 w-7\" />\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"flex-1\">\n                <h2 className=\"text-lg font-semibold text-foreground\" data-testid=\"text-username\">\n                  John Smith\n                </h2>\n                <p className=\"text-sm text-muted-foreground\" data-testid=\"text-user-role\">\n                  Account holder\n                </p>\n              </div>\n            </div>\n\n            <div className=\"space-y-3 mb-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">WhatsApp number</p>\n                  <p className=\"text-sm font-medium text-foreground\" data-testid=\"text-whatsapp\">\n                    +254 700 123 456\n                  </p>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"text-primary\"\n                  onClick={() => handleComingSoon(\"Change WhatsApp number\")}\n                  data-testid=\"button-change-whatsapp\"\n                >\n                  Change\n                </Button>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Language</p>\n                  <p className=\"text-sm font-medium text-foreground\" data-testid=\"text-language\">\n                    English\n                  </p>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"text-primary\"\n                  onClick={() => handleComingSoon(\"Change language\")}\n                  data-testid=\"button-change-language\"\n                >\n                  Change\n                </Button>\n              </div>\n            </div>\n\n            <Button\n              variant=\"outline\"\n              className=\"w-full\"\n              onClick={() => handleComingSoon(\"Edit profile\")}\n              data-testid=\"button-edit-profile\"\n            >\n              <Edit className=\"h-4 w-4 mr-2\" />\n              Edit profile\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Menu Items */}\n        {menuItems.map((item) => {\n          const Icon = item.icon;\n          return (\n            <Card\n              key={item.testId}\n              className=\"hover-elevate active-elevate-2 cursor-pointer\"\n              onClick={() => handleComingSoon(item.title)}\n              data-testid={item.testId}\n            >\n              <CardContent className=\"flex items-center gap-3 p-4\">\n                <div className=\"flex-shrink-0\">\n                  <Icon className=\"h-5 w-5 text-muted-foreground\" />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"font-medium text-foreground\">{item.title}</p>\n                  <p className=\"text-sm text-muted-foreground\">{item.subtitle}</p>\n                </div>\n                <ChevronRight className=\"h-5 w-5 text-muted-foreground flex-shrink-0\" />\n              </CardContent>\n            </Card>\n          );\n        })}\n\n        {/* Notification Preferences */}\n        <Card\n          className=\"hover-elevate active-elevate-2 cursor-pointer\"\n          onClick={() => handleComingSoon(\"Notification preferences\")}\n          data-testid=\"menu-notifications\"\n        >\n          <CardContent className=\"flex items-center gap-3 p-4\">\n            <div className=\"flex-shrink-0\">\n              <Bell className=\"h-5 w-5 text-muted-foreground\" />\n            </div>\n            <div className=\"flex-1\">\n              <p className=\"font-medium text-foreground\">Notification preferences</p>\n            </div>\n            <ChevronRight className=\"h-5 w-5 text-muted-foreground flex-shrink-0\" />\n          </CardContent>\n        </Card>\n\n        {/* Support Section */}\n        <Card data-testid=\"card-support\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"flex items-center gap-2 text-base\">\n              <HelpCircle className=\"h-5 w-5 text-muted-foreground\" />\n              Support\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            <Button\n              className=\"w-full\"\n              onClick={() => handleComingSoon(\"Contact support\")}\n              data-testid=\"button-contact-support\"\n            >\n              <Headphones className=\"h-4 w-4 mr-2\" />\n              Contact support\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"w-full bg-amber-400 hover:bg-amber-500 text-amber-950 border-amber-500\"\n              onClick={() => handleComingSoon(\"Report an issue\")}\n              data-testid=\"button-report-issue\"\n            >\n              <AlertTriangle className=\"h-4 w-4 mr-2\" />\n              Report an issue\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Legal Section */}\n        <Card data-testid=\"card-legal\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"flex items-center gap-2 text-base\">\n              <Scale className=\"h-5 w-5 text-muted-foreground\" />\n              Legal\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-1\">\n            {legalItems.map((item) => (\n              <div\n                key={item.testId}\n                className=\"flex items-center justify-between p-3 -mx-3 rounded-md hover-elevate active-elevate-2 cursor-pointer\"\n                onClick={() => setLocation(item.route)}\n                data-testid={item.testId}\n              >\n                <p className=\"text-sm font-medium text-foreground\">{item.title}</p>\n                <ChevronRight className=\"h-4 w-4 text-muted-foreground\" />\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n\n        {/* Version Info */}\n        <p className=\"text-center text-sm text-muted-foreground py-2\" data-testid=\"text-version\">\n          Version 1.0.0 (Build 123)\n        </p>\n\n        {/* Sign Out Button */}\n        <Button\n          variant=\"destructive\"\n          className=\"w-full\"\n          onClick={handleLogout}\n          data-testid=\"button-sign-out\"\n        >\n          <LogOut className=\"h-4 w-4 mr-2\" />\n          Sign out\n        </Button>\n      </div>\n    </PatientShell>\n  );\n}\n","size_bytes":8814},"client/src/components/ComingSoon.tsx":{"content":"import { useState } from \"react\";\nimport { Bell, Sparkles } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card } from \"@/components/ui/card\";\n\ninterface ComingSoonProps {\n  feature: string;\n  onNotify?: (email: string) => void;\n}\n\nexport function ComingSoon({ feature, onNotify }: ComingSoonProps) {\n  const [email, setEmail] = useState(\"\");\n  const [submitted, setSubmitted] = useState(false);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (email && onNotify) {\n      onNotify(email);\n      setSubmitted(true);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-primary/5 via-background to-accent/5\">\n      <Card className=\"max-w-md w-full p-8 text-center space-y-6\">\n        <div className=\"flex justify-center\">\n          <div className=\"h-20 w-20 rounded-full bg-primary/10 flex items-center justify-center\">\n            <Sparkles className=\"h-10 w-10 text-primary\" />\n          </div>\n        </div>\n        \n        <div className=\"space-y-2\">\n          <h2 className=\"text-3xl font-semibold text-foreground\">Coming Soon</h2>\n          <p className=\"text-muted-foreground\">\n            {feature} is currently under development and will be available soon.\n          </p>\n        </div>\n\n        {!submitted ? (\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <label htmlFor=\"notify-email\" className=\"text-sm font-medium text-foreground block text-left\">\n                Get notified when it's ready\n              </label>\n              <Input\n                id=\"notify-email\"\n                type=\"email\"\n                placeholder=\"your@email.com\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                data-testid=\"input-notify-email\"\n                className=\"w-full\"\n              />\n            </div>\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              data-testid=\"button-notify-me\"\n            >\n              <Bell className=\"mr-2 h-4 w-4\" />\n              Notify Me\n            </Button>\n          </form>\n        ) : (\n          <div className=\"p-4 bg-accent/20 rounded-lg\">\n            <p className=\"text-accent-foreground font-medium\">\n              Thanks! We'll notify you at {email}\n            </p>\n          </div>\n        )}\n      </Card>\n    </div>\n  );\n}\n","size_bytes":2529},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"server/adapters/index.ts":{"content":"import { WhatsAppAuthStub } from \"./auth.whatsappStub\";\nimport { WhatsAppMessagingStub } from \"./messaging.whatsappStub\";\nimport { QRCodeAdapter } from \"./qr.qrcodeAdapter\";\nimport { StorageLocalStub } from \"./storage.localStub\";\nimport { AuditStub } from \"./audit.stub\";\nimport { storage } from \"../storage\";\nimport type { REGISTRY } from \"@shared/config\";\n\nexport interface Adapters {\n  auth: WhatsAppAuthStub;\n  messaging: WhatsAppMessagingStub;\n  qr: QRCodeAdapter;\n  storage: StorageLocalStub;\n  audit: AuditStub;\n}\n\nexport function makeAdapters(registry: typeof REGISTRY): Adapters {\n  const adapters: any = {};\n\n  if (registry.auth === 'auth.whatsappStub') {\n    adapters.auth = new WhatsAppAuthStub(storage);\n  } else {\n    throw new Error(`Unknown auth adapter: ${registry.auth}`);\n  }\n\n  if (registry.messaging === 'messaging.whatsappStub') {\n    adapters.messaging = new WhatsAppMessagingStub();\n  } else {\n    throw new Error(`Unknown messaging adapter: ${registry.messaging}`);\n  }\n\n  if (registry.qr === 'qr.localStub') {\n    adapters.qr = new QRCodeAdapter();\n  } else {\n    throw new Error(`Unknown QR adapter: ${registry.qr}`);\n  }\n\n  if (registry.storage === 'storage.localStub') {\n    adapters.storage = new StorageLocalStub();\n  } else {\n    throw new Error(`Unknown storage adapter: ${registry.storage}`);\n  }\n\n  adapters.audit = new AuditStub();\n\n  return adapters as Adapters;\n}\n","size_bytes":1402},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/patient/Login.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { RoleLogin } from \"@/components/RoleLogin\";\nimport { api } from \"@/lib/api\";\n\nexport default function PatientLogin() {\n  const [, setLocation] = useLocation();\n\n  const handleLogin = async (email: string, phone: string) => {\n    const { user } = await api.auth.mockLogin(email, phone, \"patient\");\n    localStorage.setItem(\"mediconnect_user\", JSON.stringify(user));\n    setLocation(\"/patient/home\");\n  };\n\n  return <RoleLogin role=\"patient\" onLogin={handleLogin} />;\n}\n","size_bytes":514},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"server/adapters/qr.localStub.ts":{"content":"export class QRLocalStub {\n  async generateQrToken(prescriptionId: string): Promise<string> {\n    const token = `QR-${prescriptionId.toUpperCase()}-${Date.now().toString(36).toUpperCase()}`;\n    console.log(`[QRStub] Generated token: ${token}`);\n    return token;\n  }\n\n  async validateQrToken(token: string): Promise<boolean> {\n    console.log(`[QRStub] Validating token: ${token}`);\n    return token.startsWith('QR-');\n  }\n\n  async disableQr(prescriptionId: string): Promise<void> {\n    console.log(`[QRStub] Disabling QR for prescription: ${prescriptionId}`);\n  }\n}\n","size_bytes":568},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"replit.md":{"content":"# Mediconnect - Healthcare Access Platform\n\n## Overview\n\nMediconnect is a WhatsApp-first healthcare platform designed to connect patients with medical professionals and services. The application follows a Healthcare-as-a-Service (HaaS) model where General Practitioners (GPs) serve as the primary point of contact, managing consultations and providing curated referrals to specialists. The platform supports digital prescriptions with QR code verification, diagnostic test ordering, and a multi-portal system serving patients, GPs, specialists, pharmacies, and diagnostic centers.\n\nThe current implementation is a modular, extensible skeleton built with a ports-and-adapters (hexagonal) architecture, enabling easy replacement of stub implementations with real integrations in the future.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework**: React with TypeScript, utilizing Vite as the build tool\n\n**Routing**: Wouter for client-side routing with role-based portal separation\n\n**UI Framework**: shadcn/ui components built on Radix UI primitives with Tailwind CSS for styling\n\n**State Management**: TanStack Query (React Query) for server state management\n\n**Design System**: Material Design 3 foundation with healthcare-specific adaptations, emphasizing clinical clarity, accessibility (WCAG AAA compliance), and trust. The color palette uses medical blue as primary (HSL 210 85% 45%), healthcare green as accent (HSL 150 60% 45%), with semantic colors for different healthcare contexts (prescription purple, diagnostics cyan, consult orange).\n\n**Typography**: Inter font family for body text and headings, JetBrains Mono for data/IDs\n\n### Backend Architecture\n\n**Framework**: Express.js with TypeScript running on Node.js\n\n**Architecture Pattern**: Hexagonal/Ports-and-Adapters pattern with clear separation between domain logic and infrastructure concerns\n\n**Domain Ports** (interfaces in `shared/ports.ts`):\n- AuthPort: Authentication and OTP handling\n- ConsultPort: Consultation management\n- ReferralPort: Specialist referral handling\n- PrescriptionPort: Prescription and QR code management\n- PharmacyPort: Pharmacy QR verification\n- DiagnosticsPort: Lab order management\n- NotificationPort: Messaging notifications\n- StoragePort: File storage\n- AuditPort: Audit logging\n\n**Adapters** (implementations in `server/adapters/`):\n- WhatsAppAuthStub: Mock authentication accepting any OTP code (stub)\n- WhatsAppMessagingStub: Console-logged notifications (stub)\n- QRCodeAdapter: Production QR code generation using 'qrcode' npm package with crypto.randomBytes for secure tokens\n- ObjectStorageService: Replit Object Storage integration for file uploads/downloads (production)\n- AuditStub: In-memory audit logging (stub)\n\n**Configuration-Driven Module System**: Feature flags and adapter registry in `shared/config.ts` allow enabling/disabling features and swapping implementations without code changes\n\n### Data Storage Solutions\n\n**Current Implementation**: PostgreSQL database with Drizzle ORM (`DatabaseStorage` class in `server/storage.ts`) implementing the `IStorage` interface\n\n**Database Schema** (defined in `shared/schema.ts` using Drizzle ORM):\n- **users**: User accounts with role-based access (patient, gp, specialist, pharmacy, diagnostics), email UNIQUE constraint, nullable phone field\n- **consults**: Patient consultations with intake data and status tracking, foreign key to users\n- **messages**: Consultation messages, foreign keys to consults and users\n- **prescriptions**: Digital prescriptions with items, QR tokens, PDF download tracking, and fileUrl for cloud storage, foreign keys to consults and users\n- **referrals**: GP-to-specialist referrals with proposed specialist lists, foreign keys to users\n- **diagnosticsOrders**: Lab test orders with status tracking and resultUrl for cloud storage, foreign keys to users\n\n**Database Configuration**: PostgreSQL via Drizzle ORM with Neon serverless driver (configured in `drizzle.config.ts`)\n\n**Design Decision**: The DatabaseStorage implements the same `IStorage` interface pattern, providing type-safe database queries with proper foreign key constraints and referential integrity\n\n### Authentication and Authorization\n\n**Current Approach**: Email-based authentication with mandatory WhatsApp number\n\n**Authentication Flow**:\n1. Email + WhatsApp number input (both required for new users)\n2. Mock login finds existing users by email (primary identifier)\n3. Phone number updated if different from stored value\n4. Backend validation ensures proper email format and 10+ digit phone\n5. Session-based authentication (credentials included in fetch requests)\n\n**Authorization**: Role-based access control with five distinct user roles, each with dedicated portal routes\n\n**Database Constraints**:\n- Email: UNIQUE constraint (primary identifier)\n- Phone: Nullable (no UNIQUE constraint to avoid null collision issues)\n\n**Future Integration**: WhatsApp Business API for production OTP delivery (adapter pattern allows easy swap)\n\n### External Dependencies\n\n**UI Component Libraries**:\n- Radix UI primitives for accessible component foundation\n- shadcn/ui for pre-built healthcare-optimized components\n- Lucide React for icons\n\n**Styling**:\n- Tailwind CSS with custom healthcare color palette\n- PostCSS for processing\n\n**State and Data Fetching**:\n- TanStack Query for server state, caching, and optimistic updates\n- React Hook Form with Zod resolvers for form validation\n\n**Date Handling**:\n- date-fns for date formatting and manipulation\n\n**PDF Generation & QR Codes**:\n- PDFKit for server-side prescription PDF generation\n- qrcode npm package for cryptographically secure QR code generation\n\n**Database and ORM**:\n- Drizzle ORM for type-safe database queries\n- @neondatabase/serverless for PostgreSQL connection\n- Drizzle-Zod for schema validation\n\n**File Storage & Upload**:\n- Replit Object Storage (@google-cloud/storage) for cloud file persistence\n- Uppy (@uppy/core, @uppy/aws-s3, @uppy/dashboard, @uppy/react) for file upload UI\n\n**Development Tools**:\n- Vite plugins for Replit integration (cartographer, dev banner, runtime error overlay)\n- TypeScript for type safety across the stack\n\n**Key Architectural Decisions**:\n\n1. **Hexagonal Architecture**: Chosen to enable independent testing of business logic and easy replacement of external service implementations (WhatsApp, payment gateways, mapping services)\n\n2. **Monorepo-Ready Structure**: While currently a single app, the codebase is organized with clear package boundaries (`shared/`, `server/`, `client/`) to facilitate future monorepo migration\n\n3. **Stub-First Development**: All external integrations use stub implementations with console logging, allowing full application flow testing without third-party dependencies\n\n4. **Type-Safe Contracts**: Shared TypeScript types and Zod schemas ensure consistency between frontend and backend\n\n5. **Feature Flag System**: Enables gradual feature rollout and A/B testing without code deployment\n\n## Recent Changes (October 2025)\n\n### Completed Features (Latest)\n- ✅ **Replit Object Storage Integration**: Implemented cloud file storage for diagnostic results and prescription PDFs using Replit Object Storage, ACL policies for private/public access control, presigned upload URLs, server-side PDF uploads, and secure authenticated downloads\n- ✅ **Secure QR Code System**: Replaced stub with real 'qrcode' library using crypto.randomBytes for cryptographically secure tokens, on-demand PNG generation with high error correction, secured endpoint with authentication/authorization, audit logging for QR access\n- ✅ **Professional Homepage**: Created hero landing page with Mediconnect branding, three grouped login options (Patient/Doctor/Partner), Material Design 3 styling, responsive layout, SEO/Open Graph tags, replaced all \"demo\" references with \"functional prototype\"\n- ✅ **PostgreSQL Database Migration**: Replaced in-memory storage with DatabaseStorage using Drizzle ORM, added foreign key constraints and relations, migrated all seed data to persistent database\n- ✅ **Email Authentication with Mandatory WhatsApp**: Implemented email as primary identifier with required WhatsApp number, backend validation (email format + 10+ digit phone), UNIQUE constraint on email\n- ✅ Complete schema-first architecture with TypeScript interfaces and domain contracts\n- ✅ All five role-based portals (Patient, GP, Specialist, Pharmacy, Diagnostics) with full UI\n- ✅ Backend API with Express routes, PostgreSQL storage, and production adapters\n- ✅ Frontend-backend integration with React Query (no mock data)\n- ✅ Digital prescription PDF generation with PDFKit\n- ✅ QR-disable policy: PDF download disables QR code via adapter\n- ✅ Pharmacy item-only view: NO patient PII exposed\n- ✅ Safe localStorage helper with error handling\n- ✅ All critical bugs fixed (React hooks, nested anchors, JSON parsing, auth flow)\n\n### Core User Journeys (Verified)\n1. **Patient Flow**: Login with email+phone → View prescriptions → Download PDF (QR disabled)\n2. **Pharmacy Flow**: Login with email+phone → Scan QR → View items only (no PII) → Reject disabled QR\n3. **GP Flow**: Login with email+phone → View consultations → Manage patient care\n4. **Specialist Flow**: Login with email+phone → View referrals → Manage appointments\n5. **Diagnostics Flow**: Login with email+phone → View lab orders → Upload results\n\n### Technical Implementation\n- **Database**: PostgreSQL with Drizzle ORM, foreign key constraints, seed script with test credentials\n- **Auth Flow**: Email + WhatsApp number input, backend validation (400 errors for invalid inputs), email as primary identifier\n- **Cloud Storage**: Replit Object Storage with ACL policies, presigned URLs for uploads, secure downloads with authentication\n- **PDF Generation**: Real PDFKit PDFs uploaded to object storage, cached with fileUrl in database\n- **QR Codes**: Cryptographically secure tokens (crypto.randomBytes), on-demand PNG generation, authenticated endpoint with audit logging\n- **Storage Helper**: Safe `getUserFromStorage()` with try-catch error handling\n- **Adapter Swappability**: Config-driven registry enables production integrations\n- **Seed Data**: PostgreSQL database with test patient (email: patient@demo.com, phone: 1234567890), prescription (QR: QR-ABC123XYZ789)\n\n### Known Limitations (MVP v1)\n- Stub adapters for authentication and messaging (planned: real WhatsApp Business API, payment gateways)\n- Session management via localStorage (planned: secure session cookies/JWT for production)\n\n### Next Steps for Production\n1. ✅ ~~Migrate to PostgreSQL database with Drizzle ORM~~ (COMPLETED)\n2. ✅ ~~Email authentication with WhatsApp number~~ (COMPLETED)\n3. ✅ ~~Implement cloud storage for diagnostic results and prescription PDFs~~ (COMPLETED - Replit Object Storage)\n4. ✅ ~~Implement secure QR code generation service~~ (COMPLETED - qrcode library with crypto.randomBytes)\n5. ✅ ~~Create professional homepage with grouped login options~~ (COMPLETED)\n6. Add video consultation feature (Twilio Video/Daily.co)\n7. Implement real WhatsApp Business API integration\n8. Add payment gateway integration (Stripe/Razorpay)\n9. Add comprehensive error monitoring and logging\n10. Set up automated backups and disaster recovery\n11. Implement secure session management (JWT/secure cookies instead of localStorage)","size_bytes":11476},"client/src/lib/storage.ts":{"content":"export function getUserFromStorage() {\n  if (typeof window === 'undefined') return null;\n  \n  try {\n    const data = localStorage.getItem(\"mediconnect_user\");\n    if (!data) return null;\n    return JSON.parse(data);\n  } catch (error) {\n    console.error(\"Failed to parse user data from localStorage:\", error);\n    return null;\n  }\n}\n","size_bytes":333},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { users, consults, prescriptions, diagnosticsOrders } from \"@shared/schema\";\nimport type { PrescriptionItem } from \"@shared/schema\";\nimport { makeAdapters } from \"./adapters\";\nimport { REGISTRY } from \"@shared/config\";\n\nasync function seed() {\n  console.log(\"🌱 Seeding database...\");\n\n  const adapters = makeAdapters(REGISTRY);\n\n  // Create users\n  const [patient] = await db.insert(users).values({\n    name: \"John Doe\",\n    phone: \"1234567890\",\n    email: \"patient@demo.com\",\n    role: \"patient\",\n    metadata: {}\n  }).returning();\n\n  const [gp] = await db.insert(users).values({\n    name: \"Dr. Sarah Johnson\",\n    phone: \"+1234567891\",\n    email: \"gp@demo.com\",\n    role: \"gp\",\n    metadata: {}\n  }).returning();\n\n  const [specialist] = await db.insert(users).values({\n    name: \"Dr. David Williams\",\n    phone: \"+1234567892\",\n    email: \"specialist@demo.com\",\n    role: \"specialist\",\n    metadata: { specialty: \"Cardiology\" }\n  }).returning();\n\n  const [pharmacy] = await db.insert(users).values({\n    name: \"HealthCare Pharmacy\",\n    phone: \"+1234567893\",\n    email: \"pharmacy@demo.com\",\n    role: \"pharmacy\",\n    metadata: {}\n  }).returning();\n\n  const [lab] = await db.insert(users).values({\n    name: \"HealthLab Central\",\n    phone: \"+1234567894\",\n    email: \"lab@demo.com\",\n    role: \"diagnostics\",\n    metadata: { location: \"Valley Arcade, Lavington\" }\n  }).returning();\n\n  console.log(\"✅ Created users\");\n\n  // Create consult\n  const [consult] = await db.insert(consults).values({\n    patientId: patient.id,\n    gpId: gp.id,\n    status: \"completed\",\n    intakeSummary: \"Patient reports fever and headache for 3 days. Moderate severity.\",\n    intakeData: {\n      symptoms: \"Fever and headache\",\n      duration: \"3 days\",\n      severity: \"moderate\",\n      medications: \"None\",\n      allergies: \"None\"\n    }\n  }).returning();\n\n  console.log(\"✅ Created consult\");\n\n  // Create prescription\n  const items: PrescriptionItem[] = [\n    {\n      id: \"1\",\n      name: \"Amoxicillin\",\n      dosage: \"500mg\",\n      quantity: \"21 tablets\",\n      frequency: \"3 times daily\",\n      duration: \"7 days\",\n      instructions: \"Take with food\"\n    },\n    {\n      id: \"2\",\n      name: \"Ibuprofen\",\n      dosage: \"200mg\",\n      quantity: \"84 tablets\",\n      frequency: \"As needed for pain\",\n      duration: \"14 days\",\n      instructions: \"Do not exceed 6 tablets in 24 hours\"\n    }\n  ];\n\n  const [prescription] = await db.insert(prescriptions).values({\n    patientId: patient.id,\n    consultId: consult.id,\n    status: \"active\",\n    items,\n    qrToken: await adapters.qr.generateQrToken(consult.id),\n    qrDisabled: 0,\n    pdfDownloaded: 0\n  }).returning();\n\n  console.log(\"✅ Created prescription\");\n\n  // Create additional labs for variety\n  const [lab2] = await db.insert(users).values({\n    name: \"Lancet Kenya\",\n    phone: \"+1234567895\",\n    email: \"lancet@demo.com\",\n    role: \"diagnostics\",\n    metadata: { location: \"Westlands\" }\n  }).returning();\n\n  const [lab3] = await db.insert(users).values({\n    name: \"Pathcare Labs\",\n    phone: \"+1234567896\",\n    email: \"pathcare@demo.com\",\n    role: \"diagnostics\",\n    metadata: { location: \"Karen\" }\n  }).returning();\n\n  // Create diagnostics orders with varied statuses\n  await db.insert(diagnosticsOrders).values([\n    {\n      patientId: patient.id,\n      specialistId: specialist.id,\n      labId: lab.id,\n      status: \"sample_collected\",\n      testType: \"Complete Blood Count (CBC)\",\n      resultUrl: null\n    },\n    {\n      patientId: patient.id,\n      specialistId: specialist.id,\n      labId: lab2.id,\n      status: \"completed\",\n      testType: \"Lipid Profile\",\n      resultUrl: \"local://results-lipid-001\"\n    },\n    {\n      patientId: patient.id,\n      specialistId: specialist.id,\n      labId: lab3.id,\n      status: \"ordered\",\n      testType: \"Thyroid Function Test\",\n      resultUrl: null\n    }\n  ]).returning();\n\n  console.log(\"✅ Created diagnostics orders\");\n  console.log(\"\\n🎉 Database seeded successfully!\");\n  console.log(`\\nTest credentials:`);\n  console.log(`- Patient: phone=${patient.phone} or email=${patient.email}`);\n  console.log(`- GP: phone=${gp.phone} or email=${gp.email}`);\n  console.log(`- Specialist: phone=${specialist.phone} or email=${specialist.email}`);\n  console.log(`- Pharmacy: phone=${pharmacy.phone} or email=${pharmacy.email}`);\n  console.log(`- Diagnostics: phone=${lab.phone} or email=${lab.email}`);\n  console.log(`\\nTest QR Token: ${prescription.qrToken}`);\n}\n\nseed()\n  .catch((error) => {\n    console.error(\"❌ Seed failed:\", error);\n    process.exit(1);\n  })\n  .finally(() => {\n    process.exit(0);\n  });\n","size_bytes":4640},"client/src/components/ui/action-button.tsx":{"content":"import type { ReactNode } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { cn } from \"@/lib/utils\"\n\nexport interface ActionButtonProps {\n  icon: ReactNode\n  label: string\n  onClick?: () => void\n  variant?: \"default\" | \"outline\"\n  className?: string\n}\n\nexport function ActionButton({ \n  icon, \n  label, \n  onClick, \n  variant = \"outline\",\n  className \n}: ActionButtonProps) {\n  return (\n    <Button\n      variant={variant}\n      onClick={onClick}\n      className={cn(\"gap-2\", className)}\n      data-testid={`action-button-${label.toLowerCase().replace(/\\s+/g, \"-\")}`}\n    >\n      {icon}\n      <span>{label}</span>\n    </Button>\n  )\n}\n","size_bytes":654},"client/src/components/ui/status-badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\n\nconst statusBadgeVariants = cva(\n  \"inline-flex items-center rounded-full px-3 py-1 text-xs font-medium whitespace-nowrap\",\n  {\n    variants: {\n      variant: {\n        success: \"bg-success text-success-foreground\",\n        warning: \"bg-warning text-warning-foreground\",\n        info: \"bg-info text-info-foreground\",\n        error: \"bg-destructive text-destructive-foreground\",\n        default: \"bg-muted text-muted-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface StatusBadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof statusBadgeVariants> {}\n\nfunction StatusBadge({ className, variant = \"default\", ...props }: StatusBadgeProps) {\n  return (\n    <div \n      className={cn(statusBadgeVariants({ variant }), className)} \n      data-testid={`status-badge-${variant}`}\n      {...props} \n    />\n  )\n}\n\nexport { StatusBadge, statusBadgeVariants }\n","size_bytes":1068},"client/src/components/PatientShell.tsx":{"content":"import type { ReactNode } from \"react\"\nimport { useLocation, Link } from \"wouter\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { \n  Phone, \n  Bell,\n  UserCog, \n  Pill, \n  Heart, \n  Microscope, \n  User \n} from \"lucide-react\"\n\nexport interface PatientShellProps {\n  children: ReactNode\n  notificationCount?: number\n  onEmergencyClick?: () => void\n}\n\nconst tabs = [\n  { id: \"specialists\", label: \"Specialists\", icon: UserCog, href: \"/patient/specialists\" },\n  { id: \"pharmacy\", label: \"Pharmacy\", icon: Pill, href: \"/patient/pharmacy\" },\n  { id: \"care\", label: \"Care\", icon: Heart, href: \"/patient\" },\n  { id: \"diagnostics\", label: \"Diagnostics\", icon: Microscope, href: \"/patient/diagnostics\" },\n  { id: \"profile\", label: \"Profile\", icon: User, href: \"/patient/profile\" },\n]\n\nexport function PatientShell({ \n  children, \n  notificationCount = 0,\n  onEmergencyClick \n}: PatientShellProps) {\n  const [location] = useLocation()\n\n  const handleEmergencyClick = () => {\n    if (onEmergencyClick) {\n      onEmergencyClick()\n    } else {\n      window.location.href = \"tel:911\"\n    }\n  }\n\n  return (\n    <div className=\"flex flex-col h-screen bg-background\">\n      {/* Top Bar */}\n      <header className=\"h-14 border-b border-border bg-card flex items-center justify-between px-4\">\n        <h1 className=\"text-xl font-bold text-foreground\" data-testid=\"app-title\">\n          Mediconnect\n        </h1>\n        <div className=\"flex items-center gap-2\">\n          <button \n            className=\"relative\"\n            data-testid=\"button-notifications\"\n          >\n            <Bell className=\"h-5 w-5 text-foreground\" />\n            {notificationCount > 0 && (\n              <Badge \n                variant=\"destructive\" \n                className=\"absolute -top-1 -right-1 h-4 w-4 p-0 flex items-center justify-center text-[10px]\"\n                data-testid=\"notification-badge\"\n              >\n                {notificationCount}\n              </Badge>\n            )}\n          </button>\n          <Button\n            variant=\"destructive\"\n            size=\"sm\"\n            onClick={handleEmergencyClick}\n            className=\"gap-1\"\n            data-testid=\"button-emergency\"\n          >\n            <Phone className=\"h-4 w-4\" />\n            <span className=\"hidden sm:inline\">Emergency</span>\n          </Button>\n        </div>\n      </header>\n\n      {/* Main Content Area - Scrollable */}\n      <main className=\"flex-1 overflow-y-auto\">\n        {children}\n      </main>\n\n      {/* Bottom Tab Navigation */}\n      <nav className=\"h-16 border-t border-border bg-card\">\n        <div className=\"h-full flex items-center justify-around\">\n          {tabs.map((tab) => {\n            const Icon = tab.icon\n            const isActive = tab.href === \"/patient\" \n              ? location === \"/patient\"\n              : location.startsWith(tab.href)\n            \n            return (\n              <Link\n                key={tab.id}\n                href={tab.href}\n                className={cn(\n                  \"flex flex-col items-center justify-center gap-1 px-3 py-2 transition-colors min-w-[60px]\",\n                  \"hover-elevate active-elevate-2\",\n                  isActive \n                    ? \"text-primary\" \n                    : \"text-muted-foreground\"\n                )}\n                data-testid={`tab-${tab.id}`}\n              >\n                <Icon className=\"h-5 w-5\" />\n                <span className=\"text-xs font-medium\">{tab.label}</span>\n              </Link>\n            )\n          })}\n        </div>\n      </nav>\n    </div>\n  )\n}\n","size_bytes":3637},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const privateDir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (privateDir.length === 0) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return privateDir;\n  }\n\n  // Searches for a public object by file path.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    const searchPaths = this.getPublicObjectSearchPaths();\n    for (const searchPath of searchPaths) {\n      const [bucketName, ...pathParts] = searchPath.split(\"/\").filter(Boolean);\n      const pathPrefix = pathParts.join(\"/\");\n      const fullPath = pathPrefix\n        ? `${pathPrefix}/${filePath}`\n        : filePath;\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(fullPath);\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n    return null;\n  }\n\n  // Downloads an object and sends it as a response.\n  async downloadObject(objectFile: File, res: Response): Promise<void> {\n    const [metadata] = await objectFile.getMetadata();\n    const contentType = metadata.contentType || \"application/octet-stream\";\n    res.setHeader(\"Content-Type\", contentType);\n    res.setHeader(\n      \"Content-Disposition\",\n      `inline; filename=\"${objectFile.name.split(\"/\").pop()}\"`\n    );\n    objectFile.createReadStream().pipe(res);\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    const privateDir = this.getPrivateObjectDir();\n    const [bucketName, ...pathParts] = privateDir.split(\"/\").filter(Boolean);\n    const pathPrefix = pathParts.join(\"/\");\n    const normalizedPath = objectPath.replace(/^\\/objects\\//, \"\");\n    const fullPath = pathPrefix\n      ? `${pathPrefix}/${normalizedPath}`\n      : normalizedPath;\n    const bucket = objectStorageClient.bucket(bucketName);\n    const file = bucket.file(fullPath);\n    const [exists] = await file.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return file;\n  }\n\n  // Gets a presigned URL for uploading an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateDir = this.getPrivateObjectDir();\n    const [bucketName, ...pathParts] = privateDir.split(\"/\").filter(Boolean);\n    const pathPrefix = pathParts.join(\"/\");\n    const objectId = randomUUID();\n    const fullPath = pathPrefix ? `${pathPrefix}/${objectId}` : objectId;\n    const bucket = objectStorageClient.bucket(bucketName);\n    const file = bucket.file(fullPath);\n    const [url] = await file.getSignedUrl({\n      version: \"v4\",\n      action: \"write\",\n      expires: Date.now() + 15 * 60 * 1000, // 15 minutes\n      contentType: \"application/octet-stream\",\n    });\n    return url;\n  }\n\n  // Normalizes the object entity path from the upload URL.\n  normalizeObjectEntityPath(uploadURL: string): string {\n    const url = new URL(uploadURL);\n    const pathParts = url.pathname.split(\"/\").filter(Boolean);\n    // Remove the bucket name (first part)\n    pathParts.shift();\n    const objectPath = pathParts.join(\"/\");\n    return `/objects/${objectPath}`;\n  }\n\n  // Tries to set the ACL policy for an object entity.\n  // Returns the normalized object path if successful.\n  async trySetObjectEntityAclPolicy(\n    uploadURL: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const objectPath = this.normalizeObjectEntityPath(uploadURL);\n    const objectFile = await this.getObjectEntityFile(objectPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return objectPath;\n  }\n\n  // Checks if a user can access an object entity.\n  async canAccessObjectEntity({\n    objectFile,\n    userId,\n    requestedPermission,\n  }: {\n    objectFile: File;\n    userId?: string;\n    requestedPermission: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({ userId, objectFile, requestedPermission });\n  }\n\n  // Uploads a buffer to object storage and returns the normalized path\n  async uploadBuffer(buffer: Buffer, contentType: string = \"application/pdf\"): Promise<string> {\n    const privateDir = this.getPrivateObjectDir();\n    const [bucketName, ...pathParts] = privateDir.split(\"/\").filter(Boolean);\n    const pathPrefix = pathParts.join(\"/\");\n    const objectId = randomUUID();\n    const fullPath = pathPrefix ? `${pathPrefix}/${objectId}` : objectId;\n    const bucket = objectStorageClient.bucket(bucketName);\n    const file = bucket.file(fullPath);\n\n    await file.save(buffer, {\n      metadata: {\n        contentType: contentType,\n      },\n    });\n\n    return `/objects/${pathPrefix ? `${pathPrefix}/` : \"\"}${objectId}`;\n  }\n}\n","size_bytes":6575},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group.\n//\n// Can be flexibly defined according to the use case.\n//\n// Examples:\n// - USER_LIST: the users from a list stored in the database;\n// - EMAIL_DOMAIN: the users whose email is in a specific domain;\n// - GROUP_MEMBER: the users who are members of a specific group;\n// - SUBSCRIBER: the users who are subscribers of a specific service / content\n//   creator.\nexport enum ObjectAccessGroupType {}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  // The type of the access group.\n  type: ObjectAccessGroupType;\n  // The logic id that is enough to identify the qualified group members.\n  //\n  // It may have different format for different types. For example:\n  // - for USER_LIST, the id could be the user list db entity id, and the\n  //   user list db entity could contain a bunch of user ids. User needs\n  //   to be a member of the user list to be able to access the object.\n  // - for EMAIL_DOMAIN, the id could be the email domain, and the user needs\n  //   to have an email with the domain to be able to access the object.\n  // - for GROUP_MEMBER, the id could be the group db entity id, and the\n  //   group db entity could contain a bunch of user ids. User needs to be\n  //   a member of the group to be able to access the object.\n  // - for SUBSCRIBER, the id could be the subscriber db entity id, and the\n  //   subscriber db entity could contain a bunch of user ids. User needs to\n  //   be a subscriber to be able to access the object.\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\n// This would be set as part of the object custom metadata:\n// - key: \"custom:aclPolicy\"\n// - value: JSON string of the ObjectAclPolicy object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// The base class for all access groups.\n//\n// Different types of access groups can be implemented according to the use case.\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    // Implement the case for each type of access group to instantiate.\n    //\n    // For example:\n    // case \"USER_LIST\":\n    //   return new UserListAccessGroup(group.id);\n    // case \"EMAIL_DOMAIN\":\n    //   return new EmailDomainAccessGroup(group.id);\n    // case \"GROUP_MEMBER\":\n    //   return new GroupMemberAccessGroup(group.id);\n    // case \"SUBSCRIBER\":\n    //   return new SubscriberAccessGroup(group.id);\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","size_bytes":5544},"client/src/components/ui/progress-dots.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nexport interface ProgressDotsProps {\n  total: number\n  current: number\n  className?: string\n}\n\nexport function ProgressDots({ total, current, className }: ProgressDotsProps) {\n  return (\n    <div className={cn(\"flex items-center gap-2\", className)} data-testid=\"progress-dots\">\n      {Array.from({ length: total }).map((_, index) => {\n        const isCompleted = index <= current\n        return (\n          <div\n            key={index}\n            className={cn(\n              \"w-2 h-2 rounded-full transition-colors\",\n              isCompleted\n                ? \"bg-primary\"\n                : \"border-2 border-primary bg-transparent\"\n            )}\n            data-testid={`progress-dot-${index}`}\n          />\n        )\n      })}\n    </div>\n  )\n}\n","size_bytes":784},"client/src/components/ObjectUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\n/**\n * A file upload component that renders as a button and provides a modal interface for\n * file management.\n * \n * Features:\n * - Renders as a customizable button that opens a file upload modal\n * - Provides a modal interface for:\n *   - File selection\n *   - File preview\n *   - Upload progress tracking\n *   - Upload status display\n * \n * The component uses Uppy under the hood to handle all file upload functionality.\n * All file management features are automatically handled by the Uppy dashboard modal.\n * \n * @param props - Component props\n * @param props.maxNumberOfFiles - Maximum number of files allowed to be uploaded\n *   (default: 1)\n * @param props.maxFileSize - Maximum file size in bytes (default: 10MB)\n * @param props.onGetUploadParameters - Function to get upload parameters (method and URL).\n *   Typically used to fetch a presigned URL from the backend server for direct-to-S3\n *   uploads.\n * @param props.onComplete - Callback function called when upload is complete. Typically\n *   used to make post-upload API calls to update server state and set object ACL\n *   policies.\n * @param props.buttonClassName - Optional CSS class name for the button\n * @param props.children - Content to be rendered inside the button\n */\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 10485760,\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n      },\n      autoProceed: false,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: onGetUploadParameters,\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n      })\n  );\n\n  return (\n    <div>\n      <Button onClick={() => setShowModal(true)} className={buttonClassName}>\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n      />\n    </div>\n  );\n}\n","size_bytes":2766},"client/src/components/FamilySwitcher.tsx":{"content":"import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { cn } from \"@/lib/utils\"\n\nexport interface FamilyMember {\n  id: string\n  name: string\n  relation?: string\n  initial: string\n  avatarUrl?: string\n}\n\nexport interface FamilySwitcherProps {\n  members: FamilyMember[]\n  activeMemberId: string\n  onSwitch: (memberId: string) => void\n  className?: string\n}\n\nexport function FamilySwitcher({ \n  members, \n  activeMemberId, \n  onSwitch,\n  className \n}: FamilySwitcherProps) {\n  return (\n    <div \n      className={cn(\"flex gap-2 overflow-x-auto scrollbar-hide\", className)}\n      data-testid=\"family-switcher\"\n    >\n      {members.map((member) => {\n        const isActive = member.id === activeMemberId\n        return (\n          <button\n            key={member.id}\n            onClick={() => onSwitch(member.id)}\n            className={cn(\n              \"flex items-center gap-2 px-4 py-2 rounded-lg transition-colors whitespace-nowrap\",\n              \"hover-elevate active-elevate-2\",\n              isActive\n                ? \"bg-primary text-primary-foreground\"\n                : \"bg-muted text-muted-foreground\"\n            )}\n            data-testid={`family-member-${member.id}`}\n          >\n            <Avatar className=\"h-8 w-8\">\n              {member.avatarUrl && <AvatarImage src={member.avatarUrl} alt={member.name} />}\n              <AvatarFallback className={cn(\n                isActive ? \"bg-primary-foreground/20\" : \"bg-background\"\n              )}>\n                {member.initial}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"text-sm font-medium\">\n              {member.name}\n            </div>\n          </button>\n        )\n      })}\n    </div>\n  )\n}\n","size_bytes":1734},"server/adapters/qr.qrcodeAdapter.ts":{"content":"import QRCode from 'qrcode';\nimport { randomBytes } from 'crypto';\n\nexport class QRCodeAdapter {\n  async generateQrToken(prescriptionId: string): Promise<string> {\n    const randomToken = randomBytes(32).toString('hex');\n    const token = `QR-${randomToken}-${prescriptionId}`;\n    console.log(`[QRCodeAdapter] Generated secure token for prescription: ${prescriptionId}`);\n    return token;\n  }\n\n  async generateQR(token: string): Promise<string> {\n    try {\n      const dataUri = await QRCode.toDataURL(token, { \n        errorCorrectionLevel: 'H',\n        width: 256\n      });\n      console.log(`[QRCodeAdapter] Generated QR image for token: ${token.slice(0, 20)}...`);\n      return dataUri;\n    } catch (error) {\n      console.error('[QRCodeAdapter] Error generating QR code:', error);\n      throw new Error('Failed to generate QR code');\n    }\n  }\n\n  async validateQrToken(token: string): Promise<boolean> {\n    console.log(`[QRCodeAdapter] Validating token: ${token}`);\n    return token.startsWith('QR-');\n  }\n\n  async disableQr(prescriptionId: string): Promise<void> {\n    console.log(`[QRCodeAdapter] Disabling QR for prescription: ${prescriptionId}`);\n  }\n}\n","size_bytes":1165}},"version":1}